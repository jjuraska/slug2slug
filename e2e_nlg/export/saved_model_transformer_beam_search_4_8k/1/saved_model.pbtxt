saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Abs"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "All"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Any"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "BatchMatMul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        attr {
          name: "adj_x"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "adj_y"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "BiasAdd"
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "bias"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "Cos"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "DatasetToSingleElement"
        input_arg {
          name: "dataset"
          type: DT_VARIANT
        }
        output_arg {
          name: "components"
          type_list_attr: "output_types"
        }
        attr {
          name: "output_types"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "output_shapes"
          type: "list(shape)"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "Enter"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "frame_name"
          type: "string"
        }
        attr {
          name: "is_constant"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "parallel_iterations"
          type: "int"
          default_value {
            i: 10
          }
        }
      }
      op {
        name: "Equal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_QUINT8
              type: DT_QINT8
              type: DT_QINT32
              type: DT_STRING
              type: DT_BOOL
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Exit"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Exp"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "FloorDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Gather"
        input_arg {
          name: "params"
          type_attr: "Tparams"
        }
        input_arg {
          name: "indices"
          type_attr: "Tindices"
        }
        output_arg {
          name: "output"
          type_attr: "Tparams"
        }
        attr {
          name: "validate_indices"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "Tparams"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "GatherNd"
        input_arg {
          name: "params"
          type_attr: "Tparams"
        }
        input_arg {
          name: "indices"
          type_attr: "Tindices"
        }
        output_arg {
          name: "output"
          type_attr: "Tparams"
        }
        attr {
          name: "Tparams"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Greater"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
      }
      op {
        name: "GreaterEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "ImageSummary"
        input_arg {
          name: "tag"
          type: DT_STRING
        }
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "max_images"
          type: "int"
          default_value {
            i: 3
          }
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_FLOAT
          }
          allowed_values {
            list {
              type: DT_UINT8
              type: DT_FLOAT
              type: DT_HALF
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "bad_color"
          type: "tensor"
          default_value {
            tensor {
              dtype: DT_UINT8
              tensor_shape {
                dim {
                  size: 4
                }
              }
              int_val: 255
              int_val: 0
              int_val: 0
              int_val: 255
            }
          }
        }
      }
      op {
        name: "IsFinite"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Less"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
      }
      op {
        name: "ListDiff"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "out"
          type_attr: "T"
        }
        output_arg {
          name: "idx"
          type_attr: "out_idx"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_idx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Log"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "LogicalAnd"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        input_arg {
          name: "y"
          type: DT_BOOL
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        is_commutative: true
      }
      op {
        name: "LogicalNot"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        output_arg {
          name: "y"
          type: DT_BOOL
        }
      }
      op {
        name: "LoopCond"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
      }
      op {
        name: "MapDataset"
        input_arg {
          name: "input_dataset"
          type: DT_VARIANT
        }
        input_arg {
          name: "other_arguments"
          type_list_attr: "Targuments"
        }
        output_arg {
          name: "handle"
          type: DT_VARIANT
        }
        attr {
          name: "f"
          type: "func"
        }
        attr {
          name: "Targuments"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "output_types"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "output_shapes"
          type: "list(shape)"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MatrixBandPart"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "num_lower"
          type: DT_INT64
        }
        input_arg {
          name: "num_upper"
          type: DT_INT64
        }
        output_arg {
          name: "band"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Max"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Merge"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        output_arg {
          name: "value_index"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Min"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NextIteration"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "NotEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_QUINT8
              type: DT_QINT8
              type: DT_QINT32
              type: DT_STRING
              type: DT_BOOL
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Pad"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "paddings"
          type_attr: "Tpaddings"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tpaddings"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "PaddedBatchDataset"
        input_arg {
          name: "input_dataset"
          type: DT_VARIANT
        }
        input_arg {
          name: "batch_size"
          type: DT_INT64
        }
        input_arg {
          name: "padded_shapes"
          type: DT_INT64
          number_attr: "N"
        }
        input_arg {
          name: "padding_values"
          type_list_attr: "Toutput_types"
        }
        output_arg {
          name: "handle"
          type: DT_VARIANT
        }
        attr {
          name: "Toutput_types"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "output_shapes"
          type: "list(shape)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "Pow"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Prod"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RandomStandardNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RealDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "RefEnter"
        input_arg {
          name: "data"
          type_attr: "T"
          is_ref: true
        }
        output_arg {
          name: "output"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "frame_name"
          type: "string"
        }
        attr {
          name: "is_constant"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "parallel_iterations"
          type: "int"
          default_value {
            i: 10
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Rsqrt"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "ScatterNd"
        input_arg {
          name: "indices"
          type_attr: "Tindices"
        }
        input_arg {
          name: "updates"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tindices"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Sin"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Slice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "size"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Split"
        input_arg {
          name: "split_dim"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
          number_attr: "num_split"
        }
        attr {
          name: "num_split"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Square"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Squeeze"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "squeeze_dims"
          type: "list(int)"
          default_value {
            list {
            }
          }
          has_minimum: true
        }
      }
      op {
        name: "StopGradient"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Switch"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        input_arg {
          name: "pred"
          type: DT_BOOL
        }
        output_arg {
          name: "output_false"
          type_attr: "T"
        }
        output_arg {
          name: "output_true"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "TensorSliceDataset"
        input_arg {
          name: "components"
          type_list_attr: "Toutput_types"
        }
        output_arg {
          name: "handle"
          type: DT_VARIANT
        }
        attr {
          name: "Toutput_types"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "output_shapes"
          type: "list(shape)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Tile"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "multiples"
          type_attr: "Tmultiples"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tmultiples"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "TopKV2"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "k"
          type: DT_INT32
        }
        output_arg {
          name: "values"
          type_attr: "T"
        }
        output_arg {
          name: "indices"
          type: DT_INT32
        }
        attr {
          name: "sorted"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
            }
          }
        }
      }
      op {
        name: "Transpose"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "perm"
          type_attr: "Tperm"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tperm"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "Where"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "index"
          type: DT_INT64
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_BOOL
          }
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BFLOAT16
              type: DT_BOOL
            }
          }
        }
      }
      op {
        name: "ZerosLike"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
    }
    tags: "serve"
    tensorflow_version: "1.5.0"
    tensorflow_git_version: "v1.5.0-0-g37aa430d84"
  }
  graph_def {
    node {
      name: "global_step/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node {
      name: "global_step"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "global_step/Assign"
      op: "Assign"
      input: "global_step"
      input: "global_step/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "global_step/read"
      op: "Identity"
      input: "global_step"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "serialized_example"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "batch_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1000
          }
        }
      }
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: 1
          }
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node {
      name: "padding_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "padding_value_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "padding_value_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "serialized_example"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "MapDataset"
      op: "MapDataset"
      input: "TensorSliceDataset"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_557edf4e"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "MapDataset_1"
      op: "MapDataset"
      input: "MapDataset"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_b6493f56"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "MapDataset_2"
      op: "MapDataset"
      input: "MapDataset_1"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_f2064ac4"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "MapDataset_3"
      op: "MapDataset"
      input: "MapDataset_2"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_3cfa13bc"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "PaddedBatchDataset"
      op: "PaddedBatchDataset"
      input: "MapDataset_3"
      input: "batch_size"
      input: "Const"
      input: "Const_1"
      input: "Const_2"
      input: "padding_value"
      input: "padding_value_1"
      input: "padding_value_2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "MapDataset_4"
      op: "MapDataset"
      input: "PaddedBatchDataset"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_13841386"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "DatasetToSingleElement"
      op: "DatasetToSingleElement"
      input: "MapDataset_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "losses_avg/problem_0/total_loss/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 100.0
          }
        }
      }
    }
    node {
      name: "losses_avg/problem_0/total_loss"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "losses_avg/problem_0/total_loss/Assign"
      op: "Assign"
      input: "losses_avg/problem_0/total_loss"
      input: "losses_avg/problem_0/total_loss/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/total_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "losses_avg/problem_0/total_loss/read"
      op: "Identity"
      input: "losses_avg/problem_0/total_loss"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/total_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "losses_avg/problem_0/extra_loss/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 100.0
          }
        }
      }
    }
    node {
      name: "losses_avg/problem_0/extra_loss"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "losses_avg/problem_0/extra_loss/Assign"
      op: "Assign"
      input: "losses_avg/problem_0/extra_loss"
      input: "losses_avg/problem_0/extra_loss/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/extra_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "losses_avg/problem_0/extra_loss/read"
      op: "Identity"
      input: "losses_avg/problem_0/extra_loss"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/extra_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "losses_avg/problem_0/training_loss/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 100.0
          }
        }
      }
    }
    node {
      name: "losses_avg/problem_0/training_loss"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "losses_avg/problem_0/training_loss/Assign"
      op: "Assign"
      input: "losses_avg/problem_0/training_loss"
      input: "losses_avg/problem_0/training_loss/initial_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/training_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "losses_avg/problem_0/training_loss/read"
      op: "Identity"
      input: "losses_avg/problem_0/training_loss"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/training_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "train_stats/problem_0_steps/initial_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "train_stats/problem_0_steps"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "train_stats/problem_0_steps/Assign"
      op: "Assign"
      input: "train_stats/problem_0_steps"
      input: "train_stats/problem_0_steps/initial_value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train_stats/problem_0_steps"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "train_stats/problem_0_steps/read"
      op: "Identity"
      input: "train_stats/problem_0_steps"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train_stats/problem_0_steps"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "target_space_id"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "problem_choice"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "input_space_id"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/Shape"
      op: "Shape"
      input: "DatasetToSingleElement:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice"
      op: "StridedSlice"
      input: "transformer/Shape"
      input: "transformer/strided_slice/stack"
      input: "transformer/strided_slice/stack_1"
      input: "transformer/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/Shape"
      input: "transformer/strided_slice_1/stack"
      input: "transformer/strided_slice_1/stack_1"
      input: "transformer/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node {
      name: "transformer/add"
      op: "Add"
      input: "transformer/strided_slice_1"
      input: "transformer/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims"
      op: "ExpandDims"
      input: "DatasetToSingleElement:1"
      input: "transformer/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_1"
      op: "Shape"
      input: "transformer/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/Shape_1"
      input: "transformer/strided_slice_2/stack"
      input: "transformer/strided_slice_2/stack_1"
      input: "transformer/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_3"
      op: "StridedSlice"
      input: "transformer/Shape_1"
      input: "transformer/strided_slice_3/stack"
      input: "transformer/strided_slice_3/stack_1"
      input: "transformer/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/mul"
      op: "Mul"
      input: "transformer/strided_slice_2"
      input: "transformer/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Reshape/shape"
      op: "Pack"
      input: "transformer/mul"
      input: "transformer/strided_slice_3"
      input: "transformer/Reshape/shape/2"
      input: "transformer/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/Reshape"
      op: "Reshape"
      input: "transformer/ExpandDims"
      input: "transformer/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_2"
      op: "Shape"
      input: "transformer/Reshape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_4"
      op: "StridedSlice"
      input: "transformer/Shape_2"
      input: "transformer/strided_slice_4/stack"
      input: "transformer/strided_slice_4/stack_1"
      input: "transformer/strided_slice_4/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_5"
      op: "StridedSlice"
      input: "transformer/Shape_2"
      input: "transformer/strided_slice_5/stack"
      input: "transformer/strided_slice_5/stack_1"
      input: "transformer/strided_slice_5/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split/split_dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split"
      op: "Split"
      input: "transformer/split/split_dim"
      input: "transformer/Reshape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "num_split"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/parallel_0/transformer/Identity"
      op: "Identity"
      input: "transformer/split"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Squeeze"
      op: "Squeeze"
      input: "transformer/parallel_0/transformer/Identity"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 3
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 84
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_0"
      input: "transformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_0/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 94
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_1"
      input: "transformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_1/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_1"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 104
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_2"
      input: "transformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_2/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_2"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 114
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_3"
      input: "transformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_3/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_3"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 124
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_4"
      input: "transformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_4/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_4"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 134
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_5"
      input: "transformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_5/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_5"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 144
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_6"
      input: "transformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_6/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_6"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 154
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_7"
      input: "transformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_7/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_7"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\263\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 164
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 179
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_8"
      input: "transformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_8/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_8"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\262\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 174
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 178
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_9"
      input: "transformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_9/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_9"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\262\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 184
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 178
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_10"
      input: "transformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_10/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_10"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\262\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 194
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 178
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_11"
      input: "transformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_11/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_11"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\262\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 204
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 178
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_12"
      input: "transformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_12/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_12"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\262\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 214
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 178
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_13"
      input: "transformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_13/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_13"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\262\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 224
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 178
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_14"
      input: "transformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_14/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_14"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\262\000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 234
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 178
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_15"
      input: "transformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/shared/weights_15/read"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_15"
      op: "Identity"
      input: "transformer/symbol_modality_2857_256/shared/weights_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat"
      op: "ConcatV2"
      input: "Identity"
      input: "Identity_1"
      input: "Identity_2"
      input: "Identity_3"
      input: "Identity_4"
      input: "Identity_5"
      input: "Identity_6"
      input: "Identity_7"
      input: "Identity_8"
      input: "Identity_9"
      input: "Identity_10"
      input: "Identity_11"
      input: "Identity_12"
      input: "Identity_13"
      input: "Identity_14"
      input: "Identity_15"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat/axis"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2857
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/convert_gradient_to_tensor_cc661786"
      op: "convert_gradient_to_tensor_cc661786"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2857
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Gather"
      op: "Gather"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/convert_gradient_to_tensor_cc661786"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Squeeze"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 16.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Gather"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual"
      op: "NotEqual"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Squeeze"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ToFloat"
      op: "Cast"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims"
      op: "ExpandDims"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ToFloat"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul_1"
      op: "Mul"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Shape"
      op: "Shape"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/Shape"
      input: "transformer/body/parallel_0/body/strided_slice/stack"
      input: "transformer/body/parallel_0/body/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/Shape"
      input: "transformer/body/parallel_0/body/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/strided_slice_1"
      input: "transformer/body/parallel_0/body/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/strided_slice"
      input: "transformer/body/parallel_0/body/mul"
      input: "transformer/body/parallel_0/body/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape"
      op: "Reshape"
      input: "transformer/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul_1"
      input: "transformer/body/parallel_0/body/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Abs"
      op: "Abs"
      input: "transformer/body/parallel_0/body/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Sum"
      op: "Sum"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Abs"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Equal"
      op: "Equal"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Sum"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Equal/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/ToFloat"
      op: "Cast"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Equal"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -1000000000.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/embedding_to_padding/ToFloat"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/mul"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: " \000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.14433756470680237
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.14433756470680237
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 282
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/max"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Assign"
      op: "Assign"
      input: "transformer/body/target_space_embedding/kernel"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/read"
      op: "Identity"
      input: "transformer/body/target_space_embedding/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_16"
      op: "Identity"
      input: "transformer/body/target_space_embedding/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/target_space_embedding/convert_gradient_to_tensor_cc661786"
      op: "convert_gradient_to_tensor_cc661786"
      input: "Identity_16"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/target_space_embedding/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/target_space_embedding/convert_gradient_to_tensor_cc661786"
      input: "target_space_id"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/target_space_embedding/Gather"
      input: "transformer/body/parallel_0/body/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/Reshape"
      input: "transformer/body/parallel_0/body/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape_1"
      op: "Shape"
      input: "transformer/body/parallel_0/body/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range/start"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat"
      op: "Cast"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 128
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_1/x"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/sub/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/truediv/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.21034049987793
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/truediv"
      op: "RealDiv"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/truediv/x"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/limit"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 128
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1"
      op: "Range"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/start"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/limit"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_2"
      op: "Cast"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Neg"
      op: "Neg"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_2"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Exp"
      op: "Exp"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_1/x"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Exp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_2"
      op: "Mul"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Sin"
      op: "Sin"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Cos"
      op: "Cos"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Sin"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Cos"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod"
      op: "FloorMod"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod/x"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/1/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/1"
      op: "Pack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/1/0"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/0_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings"
      op: "Pack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/0_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad"
      op: "Pad"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/concat"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tpaddings"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape/0"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/add"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Less/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/ToFloat"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Less"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Squeeze"
      op: "Squeeze"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/ToFloat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
            i: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/sub/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/sub/x"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Squeeze"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999717180685e-10
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Less/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Where"
      op: "Where"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Less"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Where"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Shape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_17"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_18"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Square"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul"
      input: "Identity_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 408
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_19"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_19"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 458
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_20"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_20"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 508
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_21"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_21"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1767766922712326
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_1"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/begin"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice"
      op: "Slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/begin"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/values_0"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Softmax"
      op: "Softmax"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Softmax"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_2"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\003\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pow/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pow"
      op: "Pow"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pow/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -8
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod"
      op: "FloorMod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod/x"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3/0"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/0_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/1_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/2_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/0_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/1_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad"
      op: "Pad"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pow"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tpaddings"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/floordiv/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/floordiv"
      op: "FloorDiv"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/floordiv/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/3"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/floordiv"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Max/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Max"
      op: "Max"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Max/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention"
      op: "ImageSummary"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention/tag"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Max"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "bad_color"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 4
              }
            }
            int_val: 255
            int_val: 0
            int_val: 0
            int_val: 255
          }
        }
      }
      attr {
        key: "max_images"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 690
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_22"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_22"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_23"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_24"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Square"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul"
      input: "Identity_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/values_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/values_0"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/values_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/remove/GatherNd"
      op: "GatherNd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/remove/GatherNd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 791
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_25"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_26"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_25"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/BiasAdd"
      op: "BiasAdd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot"
      input: "Identity_26"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Relu"
      op: "Relu"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 848
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_27"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_28"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Relu"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_27"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/BiasAdd"
      op: "BiasAdd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot"
      input: "Identity_28"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Squeeze"
      op: "Squeeze"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/ScatterNd"
      op: "ScatterNd"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Squeeze"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/ScatterNd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_29"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_30"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Square"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul"
      input: "Identity_29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_30"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 950
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_31"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_31"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1000
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_32"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_32"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1050
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_33"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_33"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1767766922712326
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_1"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/begin"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice"
      op: "Slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/begin"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/values_0"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Softmax"
      op: "Softmax"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Softmax"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_2"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\003\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pow/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pow"
      op: "Pow"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pow/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -8
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod"
      op: "FloorMod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod/x"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3/0"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/0_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/1_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/2_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/0_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/1_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad"
      op: "Pad"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pow"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tpaddings"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/floordiv/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/floordiv"
      op: "FloorDiv"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_3"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/floordiv/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/3"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/floordiv"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Max/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Max"
      op: "Max"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Max/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention"
      op: "ImageSummary"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention/tag"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Max"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "bad_color"
        value {
          tensor {
            dtype: DT_UINT8
            tensor_shape {
              dim {
                size: 4
              }
            }
            int_val: 255
            int_val: 0
            int_val: 0
            int_val: 255
          }
        }
      }
      attr {
        key: "max_images"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1232
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_34"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_34"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_35"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_36"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Square"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul"
      input: "Identity_35"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_36"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/values_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/values_0"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/values_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/remove/GatherNd"
      op: "GatherNd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/remove/GatherNd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1333
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_37"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_38"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_37"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/BiasAdd"
      op: "BiasAdd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot"
      input: "Identity_38"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Relu"
      op: "Relu"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1390
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_39"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_40"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GreaterEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Cast_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/range/start"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Rank"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/range"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Gather"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Gather_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/ListDiff"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Relu"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_39"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Gather"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/BiasAdd"
      op: "BiasAdd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot"
      input: "Identity_40"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Squeeze"
      op: "Squeeze"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/ScatterNd"
      op: "ScatterNd"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Squeeze"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/ScatterNd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/dropout/keep_prob"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_41"
      op: "Identity"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_42"
      op: "Identity"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Square"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/mul"
      input: "Identity_41"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_42"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/add_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/add_1"
      op: "Add"
      input: "transformer/add"
      input: "transformer/add_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range"
      op: "Range"
      input: "transformer/get_timing_signal_1d/range/start"
      input: "transformer/add_1"
      input: "transformer/get_timing_signal_1d/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ToFloat"
      op: "Cast"
      input: "transformer/get_timing_signal_1d/range"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ToFloat_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 128
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ToFloat_1"
      op: "Cast"
      input: "transformer/get_timing_signal_1d/ToFloat_1/x"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/sub"
      op: "Sub"
      input: "transformer/get_timing_signal_1d/ToFloat_1"
      input: "transformer/get_timing_signal_1d/sub/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/truediv/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.21034049987793
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/truediv"
      op: "RealDiv"
      input: "transformer/get_timing_signal_1d/truediv/x"
      input: "transformer/get_timing_signal_1d/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range_1/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range_1/limit"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 128
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range_1/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range_1"
      op: "Range"
      input: "transformer/get_timing_signal_1d/range_1/start"
      input: "transformer/get_timing_signal_1d/range_1/limit"
      input: "transformer/get_timing_signal_1d/range_1/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ToFloat_2"
      op: "Cast"
      input: "transformer/get_timing_signal_1d/range_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Neg"
      op: "Neg"
      input: "transformer/get_timing_signal_1d/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/mul"
      op: "Mul"
      input: "transformer/get_timing_signal_1d/ToFloat_2"
      input: "transformer/get_timing_signal_1d/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Exp"
      op: "Exp"
      input: "transformer/get_timing_signal_1d/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/mul_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/mul_1"
      op: "Mul"
      input: "transformer/get_timing_signal_1d/mul_1/x"
      input: "transformer/get_timing_signal_1d/Exp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ExpandDims"
      op: "ExpandDims"
      input: "transformer/get_timing_signal_1d/ToFloat"
      input: "transformer/get_timing_signal_1d/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/get_timing_signal_1d/mul_1"
      input: "transformer/get_timing_signal_1d/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/mul_2"
      op: "Mul"
      input: "transformer/get_timing_signal_1d/ExpandDims"
      input: "transformer/get_timing_signal_1d/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Sin"
      op: "Sin"
      input: "transformer/get_timing_signal_1d/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Cos"
      op: "Cos"
      input: "transformer/get_timing_signal_1d/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/concat"
      op: "ConcatV2"
      input: "transformer/get_timing_signal_1d/Sin"
      input: "transformer/get_timing_signal_1d/Cos"
      input: "transformer/get_timing_signal_1d/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/FloorMod/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/FloorMod/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/FloorMod"
      op: "FloorMod"
      input: "transformer/get_timing_signal_1d/FloorMod/x"
      input: "transformer/get_timing_signal_1d/FloorMod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad/paddings/1/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad/paddings/1"
      op: "Pack"
      input: "transformer/get_timing_signal_1d/Pad/paddings/1/0"
      input: "transformer/get_timing_signal_1d/FloorMod"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad/paddings/0_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad/paddings"
      op: "Pack"
      input: "transformer/get_timing_signal_1d/Pad/paddings/0_1"
      input: "transformer/get_timing_signal_1d/Pad/paddings/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad"
      op: "Pad"
      input: "transformer/get_timing_signal_1d/concat"
      input: "transformer/get_timing_signal_1d/Pad/paddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tpaddings"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Reshape/shape/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Reshape/shape"
      op: "Pack"
      input: "transformer/get_timing_signal_1d/Reshape/shape/0"
      input: "transformer/add_1"
      input: "transformer/get_timing_signal_1d/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Reshape"
      op: "Reshape"
      input: "transformer/get_timing_signal_1d/Pad"
      input: "transformer/get_timing_signal_1d/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/shape"
      op: "Pack"
      input: "transformer/add"
      input: "transformer/add"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones"
      op: "Fill"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/shape"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast"
      op: "Cast"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast/x"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast_1"
      op: "Cast"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast_1/x"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/MatrixBandPart"
      op: "MatrixBandPart"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/ones"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape"
      op: "Pack"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape/0"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape/1"
      input: "transformer/add"
      input: "transformer/add"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape"
      op: "Reshape"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/MatrixBandPart"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/sub/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/sub"
      op: "Sub"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/sub/x"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/mul/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -1000000000.0
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/mul"
      op: "Mul"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/mul/x"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_3"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_6"
      op: "StridedSlice"
      input: "transformer/Shape_3"
      input: "transformer/strided_slice_6/stack"
      input: "transformer/strided_slice_6/stack_1"
      input: "transformer/strided_slice_6/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_7"
      op: "StridedSlice"
      input: "transformer/Shape_3"
      input: "transformer/strided_slice_7/stack"
      input: "transformer/strided_slice_7/stack_1"
      input: "transformer/strided_slice_7/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/zeros/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros/shape"
      op: "Pack"
      input: "transformer/strided_slice_6"
      input: "transformer/zeros/shape/1"
      input: "transformer/zeros/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros"
      op: "Fill"
      input: "transformer/zeros/shape"
      input: "transformer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/shape"
      op: "Pack"
      input: "transformer/strided_slice_6"
      input: "transformer/zeros_1/shape/1"
      input: "transformer/zeros_1/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/zeros_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1"
      op: "Fill"
      input: "transformer/zeros_1/shape"
      input: "transformer/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/shape"
      op: "Pack"
      input: "transformer/strided_slice_6"
      input: "transformer/zeros_2/shape/1"
      input: "transformer/zeros_2/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/zeros_2/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2"
      op: "Fill"
      input: "transformer/zeros_2/shape"
      input: "transformer/zeros_2/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/shape"
      op: "Pack"
      input: "transformer/strided_slice_6"
      input: "transformer/zeros_3/shape/1"
      input: "transformer/zeros_3/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/zeros_3/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3"
      op: "Fill"
      input: "transformer/zeros_3/shape"
      input: "transformer/zeros_3/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/shape"
      op: "Pack"
      input: "transformer/strided_slice_6"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/zeros_4/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4"
      op: "Fill"
      input: "transformer/zeros_4/shape"
      input: "transformer/zeros_4/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_4"
      op: "Shape"
      input: "transformer/zeros_4"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_8"
      op: "StridedSlice"
      input: "transformer/Shape_4"
      input: "transformer/strided_slice_8/stack"
      input: "transformer/strided_slice_8/stack_1"
      input: "transformer/strided_slice_8/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\000\000\200\377\000\000\200\377\000\000\200\377"
          }
        }
      }
    }
    node {
      name: "transformer/Tile/multiples/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Tile/multiples"
      op: "Pack"
      input: "transformer/strided_slice_8"
      input: "transformer/Tile/multiples/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/Tile"
      op: "Tile"
      input: "transformer/Const_1"
      input: "transformer/Tile/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/zeros_4"
      input: "transformer/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_1/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_1"
      op: "Tile"
      input: "transformer/ExpandDims_1"
      input: "transformer/Tile_1/multiples"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_2/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_2"
      op: "ExpandDims"
      input: "transformer/Tile_1"
      input: "transformer/ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_3/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_3"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      input: "transformer/ExpandDims_3/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_2/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_2"
      op: "Tile"
      input: "transformer/ExpandDims_3"
      input: "transformer/Tile_2/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_4/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_4"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/ExpandDims_4/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_3/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_3"
      op: "Tile"
      input: "transformer/ExpandDims_4"
      input: "transformer/Tile_3/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_5/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_5"
      op: "ExpandDims"
      input: "transformer/zeros"
      input: "transformer/ExpandDims_5/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_4/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_4"
      op: "Tile"
      input: "transformer/ExpandDims_5"
      input: "transformer/Tile_4/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_6/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_6"
      op: "ExpandDims"
      input: "transformer/zeros_1"
      input: "transformer/ExpandDims_6/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_5/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_5"
      op: "Tile"
      input: "transformer/ExpandDims_6"
      input: "transformer/Tile_5/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_7/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_7"
      op: "ExpandDims"
      input: "transformer/zeros_2"
      input: "transformer/ExpandDims_7/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_6/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_6"
      op: "Tile"
      input: "transformer/ExpandDims_7"
      input: "transformer/Tile_6/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_8/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_8"
      op: "ExpandDims"
      input: "transformer/zeros_3"
      input: "transformer/ExpandDims_8/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_7/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_7"
      op: "Tile"
      input: "transformer/ExpandDims_8"
      input: "transformer/Tile_7/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tmultiples"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_5"
      op: "Shape"
      input: "transformer/ExpandDims_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/strided_slice_9/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_9/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_9/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_9"
      op: "StridedSlice"
      input: "transformer/Shape_5"
      input: "transformer/strided_slice_9/stack"
      input: "transformer/strided_slice_9/stack_1"
      input: "transformer/strided_slice_9/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/zeros_5/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/shape"
      op: "Pack"
      input: "transformer/strided_slice_9"
      input: "transformer/zeros_5/shape/1"
      input: "transformer/zeros_5/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/zeros_5/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5"
      op: "Fill"
      input: "transformer/zeros_5/shape"
      input: "transformer/zeros_5/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ones/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/ones/shape"
      op: "Pack"
      input: "transformer/strided_slice_8"
      input: "transformer/ones/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/ones/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/ones"
      op: "Fill"
      input: "transformer/ones/shape"
      input: "transformer/ones/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -10000000.0
          }
        }
      }
    }
    node {
      name: "transformer/mul_1"
      op: "Mul"
      input: "transformer/ones"
      input: "transformer/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/shape"
      op: "Pack"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_6/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/zeros_6/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6"
      op: "Fill"
      input: "transformer/zeros_6/shape"
      input: "transformer/zeros_6/Const"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/Enter"
      op: "Enter"
      input: "transformer/Const_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_1"
      op: "Enter"
      input: "transformer/ExpandDims_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_2"
      op: "Enter"
      input: "transformer/Tile"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_3"
      op: "Enter"
      input: "transformer/zeros_5"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_4"
      op: "Enter"
      input: "transformer/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_5"
      op: "Enter"
      input: "transformer/zeros_6"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_6"
      op: "Enter"
      input: "transformer/Tile_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_7"
      op: "Enter"
      input: "transformer/Tile_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_8"
      op: "Enter"
      input: "transformer/Tile_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_9"
      op: "Enter"
      input: "transformer/Tile_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_10"
      op: "Enter"
      input: "transformer/Tile_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_11"
      op: "Enter"
      input: "transformer/Tile_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: false
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Merge"
      op: "Merge"
      input: "transformer/while/Enter"
      input: "transformer/while/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_1"
      op: "Merge"
      input: "transformer/while/Enter_1"
      input: "transformer/while/NextIteration_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_2"
      op: "Merge"
      input: "transformer/while/Enter_2"
      input: "transformer/while/NextIteration_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_3"
      op: "Merge"
      input: "transformer/while/Enter_3"
      input: "transformer/while/NextIteration_3"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_4"
      op: "Merge"
      input: "transformer/while/Enter_4"
      input: "transformer/while/NextIteration_4"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_5"
      op: "Merge"
      input: "transformer/while/Enter_5"
      input: "transformer/while/NextIteration_5"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_6"
      op: "Merge"
      input: "transformer/while/Enter_6"
      input: "transformer/while/NextIteration_6"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_7"
      op: "Merge"
      input: "transformer/while/Enter_7"
      input: "transformer/while/NextIteration_7"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_8"
      op: "Merge"
      input: "transformer/while/Enter_8"
      input: "transformer/while/NextIteration_8"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_9"
      op: "Merge"
      input: "transformer/while/Enter_9"
      input: "transformer/while/NextIteration_9"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_10"
      op: "Merge"
      input: "transformer/while/Enter_10"
      input: "transformer/while/NextIteration_10"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_11"
      op: "Merge"
      input: "transformer/while/Enter_11"
      input: "transformer/while/NextIteration_11"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat"
      op: "Cast"
      input: "transformer/while/ToFloat/Enter"
      input: "^transformer/while/Merge"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat/Enter"
      op: "Enter"
      input: "transformer/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/add/x"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 5.0
          }
        }
      }
    }
    node {
      name: "transformer/while/add"
      op: "Add"
      input: "transformer/while/add/x"
      input: "transformer/while/ToFloat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv/y"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 6.0
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv"
      op: "RealDiv"
      input: "transformer/while/add"
      input: "transformer/while/truediv/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Pow/y"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/Pow"
      op: "Pow"
      input: "transformer/while/truediv"
      input: "transformer/while/Pow/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/Merge_2"
      input: "transformer/while/strided_slice/stack"
      input: "transformer/while/strided_slice/stack_1"
      input: "transformer/while/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/while/truediv_1"
      op: "RealDiv"
      input: "transformer/while/strided_slice"
      input: "transformer/while/Pow"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat_1"
      op: "Cast"
      input: "transformer/while/Merge_5"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul"
      op: "Mul"
      input: "transformer/while/Merge_4"
      input: "transformer/while/ToFloat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Min/reduction_indices"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/Min"
      op: "Min"
      input: "transformer/while/mul"
      input: "transformer/while/Min/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/Any/reduction_indices"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/Any"
      op: "Any"
      input: "transformer/while/Merge_5"
      input: "transformer/while/Any/reduction_indices"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/ToFloat_2"
      op: "Cast"
      input: "transformer/while/Any"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/sub/x"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/sub"
      op: "Sub"
      input: "transformer/while/sub/x"
      input: "transformer/while/ToFloat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_1/y"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -10000000.0
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_1"
      op: "Mul"
      input: "transformer/while/sub"
      input: "transformer/while/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_1"
      op: "Add"
      input: "transformer/while/Min"
      input: "transformer/while/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Greater"
      op: "Greater"
      input: "transformer/while/add_1"
      input: "transformer/while/truediv_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Const"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/All"
      op: "All"
      input: "transformer/while/Greater"
      input: "transformer/while/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/Less"
      op: "Less"
      input: "transformer/while/Merge"
      input: "transformer/while/ToFloat/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/LogicalNot"
      op: "LogicalNot"
      input: "transformer/while/All"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/LogicalAnd"
      op: "LogicalAnd"
      input: "transformer/while/Less"
      input: "transformer/while/LogicalNot"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/LoopCond"
      op: "LoopCond"
      input: "transformer/while/LogicalAnd"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch"
      op: "Switch"
      input: "transformer/while/Merge"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_1"
      op: "Switch"
      input: "transformer/while/Merge_1"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_2"
      op: "Switch"
      input: "transformer/while/Merge_2"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_3"
      op: "Switch"
      input: "transformer/while/Merge_3"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_4"
      op: "Switch"
      input: "transformer/while/Merge_4"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_5"
      op: "Switch"
      input: "transformer/while/Merge_5"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_6"
      op: "Switch"
      input: "transformer/while/Merge_6"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_7"
      op: "Switch"
      input: "transformer/while/Merge_7"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_8"
      op: "Switch"
      input: "transformer/while/Merge_8"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_9"
      op: "Switch"
      input: "transformer/while/Merge_9"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_10"
      op: "Switch"
      input: "transformer/while/Merge_10"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_11"
      op: "Switch"
      input: "transformer/while/Merge_11"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity"
      op: "Identity"
      input: "transformer/while/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_1"
      op: "Identity"
      input: "transformer/while/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_2"
      op: "Identity"
      input: "transformer/while/Switch_2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_3"
      op: "Identity"
      input: "transformer/while/Switch_3:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_4"
      op: "Identity"
      input: "transformer/while/Switch_4:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_5"
      op: "Identity"
      input: "transformer/while/Switch_5:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_6"
      op: "Identity"
      input: "transformer/while/Switch_6:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_7"
      op: "Identity"
      input: "transformer/while/Switch_7:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_8"
      op: "Identity"
      input: "transformer/while/Switch_8:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_9"
      op: "Identity"
      input: "transformer/while/Switch_9:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_10"
      op: "Identity"
      input: "transformer/while/Switch_10:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_11"
      op: "Identity"
      input: "transformer/while/Switch_11:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_2/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_2"
      op: "Mul"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/mul_2/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_2/Enter"
      op: "Enter"
      input: "transformer/strided_slice_8"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape/shape"
      op: "Pack"
      input: "transformer/while/mul_2"
      input: "transformer/while/Reshape/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape"
      op: "Reshape"
      input: "transformer/while/Identity_1"
      input: "transformer/while/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape"
      op: "Shape"
      input: "transformer/while/Identity_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_1/stack"
      input: "transformer/while/strided_slice_1/stack_1"
      input: "transformer/while/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_2/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_2/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_2/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_2/stack"
      input: "transformer/while/strided_slice_2/stack_1"
      input: "transformer/while/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_3/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_3/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_3/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_3"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_3/stack"
      input: "transformer/while/strided_slice_3/stack_1"
      input: "transformer/while/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_4/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_4/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_4/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_4"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_4/stack"
      input: "transformer/while/strided_slice_4/stack_1"
      input: "transformer/while/strided_slice_4/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_5/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_5/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 5
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_5/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_5"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_5/stack"
      input: "transformer/while/strided_slice_5/stack_1"
      input: "transformer/while/strided_slice_5/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_3"
      op: "Mul"
      input: "transformer/while/strided_slice_1"
      input: "transformer/while/strided_slice_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_1/shape"
      op: "Pack"
      input: "transformer/while/mul_3"
      input: "transformer/while/strided_slice_3"
      input: "transformer/while/strided_slice_4"
      input: "transformer/while/strided_slice_5"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_1"
      op: "Reshape"
      input: "transformer/while/Identity_6"
      input: "transformer/while/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_1"
      op: "Shape"
      input: "transformer/while/Identity_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_6/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_6/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_6/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_6"
      op: "StridedSlice"
      input: "transformer/while/Shape_1"
      input: "transformer/while/strided_slice_6/stack"
      input: "transformer/while/strided_slice_6/stack_1"
      input: "transformer/while/strided_slice_6/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_7/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_7/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_7/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_7"
      op: "StridedSlice"
      input: "transformer/while/Shape_1"
      input: "transformer/while/strided_slice_7/stack"
      input: "transformer/while/strided_slice_7/stack_1"
      input: "transformer/while/strided_slice_7/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_8/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_8/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_8/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_8"
      op: "StridedSlice"
      input: "transformer/while/Shape_1"
      input: "transformer/while/strided_slice_8/stack"
      input: "transformer/while/strided_slice_8/stack_1"
      input: "transformer/while/strided_slice_8/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_4"
      op: "Mul"
      input: "transformer/while/strided_slice_6"
      input: "transformer/while/strided_slice_7"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_2/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_2/shape"
      op: "Pack"
      input: "transformer/while/mul_4"
      input: "transformer/while/strided_slice_8"
      input: "transformer/while/Reshape_2/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_2"
      op: "Reshape"
      input: "transformer/while/Identity_7"
      input: "transformer/while/Reshape_2/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_2"
      op: "Shape"
      input: "transformer/while/Identity_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_9/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_9/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_9/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_9"
      op: "StridedSlice"
      input: "transformer/while/Shape_2"
      input: "transformer/while/strided_slice_9/stack"
      input: "transformer/while/strided_slice_9/stack_1"
      input: "transformer/while/strided_slice_9/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_10/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_10/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_10/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_10"
      op: "StridedSlice"
      input: "transformer/while/Shape_2"
      input: "transformer/while/strided_slice_10/stack"
      input: "transformer/while/strided_slice_10/stack_1"
      input: "transformer/while/strided_slice_10/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_11/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_11/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_11/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_11"
      op: "StridedSlice"
      input: "transformer/while/Shape_2"
      input: "transformer/while/strided_slice_11/stack"
      input: "transformer/while/strided_slice_11/stack_1"
      input: "transformer/while/strided_slice_11/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_5"
      op: "Mul"
      input: "transformer/while/strided_slice_9"
      input: "transformer/while/strided_slice_10"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_3/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_3/shape"
      op: "Pack"
      input: "transformer/while/mul_5"
      input: "transformer/while/strided_slice_11"
      input: "transformer/while/Reshape_3/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_3"
      op: "Reshape"
      input: "transformer/while/Identity_8"
      input: "transformer/while/Reshape_3/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_3"
      op: "Shape"
      input: "transformer/while/Identity_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_12/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_12/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_12/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_12"
      op: "StridedSlice"
      input: "transformer/while/Shape_3"
      input: "transformer/while/strided_slice_12/stack"
      input: "transformer/while/strided_slice_12/stack_1"
      input: "transformer/while/strided_slice_12/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_13/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_13/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_13/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_13"
      op: "StridedSlice"
      input: "transformer/while/Shape_3"
      input: "transformer/while/strided_slice_13/stack"
      input: "transformer/while/strided_slice_13/stack_1"
      input: "transformer/while/strided_slice_13/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_14/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_14/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_14/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_14"
      op: "StridedSlice"
      input: "transformer/while/Shape_3"
      input: "transformer/while/strided_slice_14/stack"
      input: "transformer/while/strided_slice_14/stack_1"
      input: "transformer/while/strided_slice_14/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_6"
      op: "Mul"
      input: "transformer/while/strided_slice_12"
      input: "transformer/while/strided_slice_13"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_4/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_4/shape"
      op: "Pack"
      input: "transformer/while/mul_6"
      input: "transformer/while/strided_slice_14"
      input: "transformer/while/Reshape_4/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_4"
      op: "Reshape"
      input: "transformer/while/Identity_9"
      input: "transformer/while/Reshape_4/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_4"
      op: "Shape"
      input: "transformer/while/Identity_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_15/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_15/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_15/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_15"
      op: "StridedSlice"
      input: "transformer/while/Shape_4"
      input: "transformer/while/strided_slice_15/stack"
      input: "transformer/while/strided_slice_15/stack_1"
      input: "transformer/while/strided_slice_15/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_16/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_16/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_16/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_16"
      op: "StridedSlice"
      input: "transformer/while/Shape_4"
      input: "transformer/while/strided_slice_16/stack"
      input: "transformer/while/strided_slice_16/stack_1"
      input: "transformer/while/strided_slice_16/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_17/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_17/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_17/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_17"
      op: "StridedSlice"
      input: "transformer/while/Shape_4"
      input: "transformer/while/strided_slice_17/stack"
      input: "transformer/while/strided_slice_17/stack_1"
      input: "transformer/while/strided_slice_17/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_7"
      op: "Mul"
      input: "transformer/while/strided_slice_15"
      input: "transformer/while/strided_slice_16"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_5/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_5/shape"
      op: "Pack"
      input: "transformer/while/mul_7"
      input: "transformer/while/strided_slice_17"
      input: "transformer/while/Reshape_5/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_5"
      op: "Reshape"
      input: "transformer/while/Identity_10"
      input: "transformer/while/Reshape_5/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_5"
      op: "Shape"
      input: "transformer/while/Identity_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_18/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_18/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_18/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_18"
      op: "StridedSlice"
      input: "transformer/while/Shape_5"
      input: "transformer/while/strided_slice_18/stack"
      input: "transformer/while/strided_slice_18/stack_1"
      input: "transformer/while/strided_slice_18/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_19/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_19/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_19/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_19"
      op: "StridedSlice"
      input: "transformer/while/Shape_5"
      input: "transformer/while/strided_slice_19/stack"
      input: "transformer/while/strided_slice_19/stack_1"
      input: "transformer/while/strided_slice_19/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_20/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_20/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_20/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_20"
      op: "StridedSlice"
      input: "transformer/while/Shape_5"
      input: "transformer/while/strided_slice_20/stack"
      input: "transformer/while/strided_slice_20/stack_1"
      input: "transformer/while/strided_slice_20/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_8"
      op: "Mul"
      input: "transformer/while/strided_slice_18"
      input: "transformer/while/strided_slice_19"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_6/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_6/shape"
      op: "Pack"
      input: "transformer/while/mul_8"
      input: "transformer/while/strided_slice_20"
      input: "transformer/while/Reshape_6/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_6"
      op: "Reshape"
      input: "transformer/while/Identity_11"
      input: "transformer/while/Reshape_6/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_21/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_21/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_21/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_21"
      op: "StridedSlice"
      input: "transformer/while/Reshape"
      input: "transformer/while/strided_slice_21/stack"
      input: "transformer/while/strided_slice_21/stack_1"
      input: "transformer/while/strided_slice_21/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims"
      op: "ExpandDims"
      input: "transformer/while/strided_slice_21"
      input: "transformer/while/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_1/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/while/ExpandDims"
      input: "transformer/while/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_6"
      op: "Shape"
      input: "transformer/while/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_22/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_22/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_22/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_22"
      op: "StridedSlice"
      input: "transformer/while/Shape_6"
      input: "transformer/while/strided_slice_22/stack"
      input: "transformer/while/strided_slice_22/stack_1"
      input: "transformer/while/strided_slice_22/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_23/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_23/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_23/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_23"
      op: "StridedSlice"
      input: "transformer/while/Shape_6"
      input: "transformer/while/strided_slice_23/stack"
      input: "transformer/while/strided_slice_23/stack_1"
      input: "transformer/while/strided_slice_23/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/split/split_dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/split"
      op: "Split"
      input: "transformer/while/split/split_dim"
      input: "transformer/while/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "num_split"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/parallel_0/transformer/Identity"
      op: "Identity"
      input: "transformer/while/split"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Squeeze"
      op: "Squeeze"
      input: "transformer/while/parallel_0/transformer/Identity"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 3
          }
        }
      }
    }
    node {
      name: "Identity_43"
      op: "Identity"
      input: "Identity_43/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_43/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_44"
      op: "Identity"
      input: "Identity_44/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_44/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_45"
      op: "Identity"
      input: "Identity_45/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_45/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_46"
      op: "Identity"
      input: "Identity_46/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_46/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_47"
      op: "Identity"
      input: "Identity_47/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_47/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_48"
      op: "Identity"
      input: "Identity_48/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_48/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_49"
      op: "Identity"
      input: "Identity_49/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_49/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_50"
      op: "Identity"
      input: "Identity_50/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_50/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_51"
      op: "Identity"
      input: "Identity_51/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_51/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_52"
      op: "Identity"
      input: "Identity_52/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_52/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_53"
      op: "Identity"
      input: "Identity_53/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_53/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_54"
      op: "Identity"
      input: "Identity_54/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_54/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_55"
      op: "Identity"
      input: "Identity_55/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_55/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_56"
      op: "Identity"
      input: "Identity_56/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_56/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_57"
      op: "Identity"
      input: "Identity_57/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_57/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_58"
      op: "Identity"
      input: "Identity_58/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_58/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_2857_256/shared/weights_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat"
      op: "ConcatV2"
      input: "Identity_43"
      input: "Identity_44"
      input: "Identity_45"
      input: "Identity_46"
      input: "Identity_47"
      input: "Identity_48"
      input: "Identity_49"
      input: "Identity_50"
      input: "Identity_51"
      input: "Identity_52"
      input: "Identity_53"
      input: "Identity_54"
      input: "Identity_55"
      input: "Identity_56"
      input: "Identity_57"
      input: "Identity_58"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat/axis"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2857
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/convert_gradient_to_tensor_cc661786"
      op: "convert_gradient_to_tensor_cc661786"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2857
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Gather"
      op: "Gather"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/convert_gradient_to_tensor_cc661786"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Squeeze"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 16.0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul"
      op: "Mul"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Gather"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual"
      op: "NotEqual"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Squeeze"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ToFloat"
      op: "Cast"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims"
      op: "ExpandDims"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ToFloat"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul_1"
      op: "Mul"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_7"
      op: "Shape"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_24/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_24/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_24/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_24"
      op: "StridedSlice"
      input: "transformer/while/Shape_7"
      input: "transformer/while/strided_slice_24/stack"
      input: "transformer/while/strided_slice_24/stack_1"
      input: "transformer/while/strided_slice_24/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_25/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_25/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_25/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_25"
      op: "StridedSlice"
      input: "transformer/while/Shape_7"
      input: "transformer/while/strided_slice_25/stack"
      input: "transformer/while/strided_slice_25/stack_1"
      input: "transformer/while/strided_slice_25/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_9/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_9"
      op: "Mul"
      input: "transformer/while/strided_slice_25"
      input: "transformer/while/mul_9/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_7/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_7/shape"
      op: "Pack"
      input: "transformer/while/strided_slice_24"
      input: "transformer/while/mul_9"
      input: "transformer/while/Reshape_7/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_7"
      op: "Reshape"
      input: "transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul_1"
      input: "transformer/while/Reshape_7/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Equal/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/Equal"
      op: "Equal"
      input: "transformer/while/Identity"
      input: "transformer/while/Equal/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/Switch"
      op: "Switch"
      input: "transformer/while/Equal"
      input: "transformer/while/Equal"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/switch_t"
      op: "Identity"
      input: "transformer/while/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/switch_f"
      op: "Identity"
      input: "transformer/while/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/pred_id"
      op: "Identity"
      input: "transformer/while/Equal"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/zeros_like"
      op: "ZerosLike"
      input: "transformer/while/cond/zeros_like/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/zeros_like/Switch"
      op: "Switch"
      input: "transformer/while/Reshape_7"
      input: "transformer/while/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Reshape_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/Switch_1"
      op: "Switch"
      input: "transformer/while/Reshape_7"
      input: "transformer/while/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Reshape_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/Merge"
      op: "Merge"
      input: "transformer/while/cond/Switch_1"
      input: "transformer/while/cond/zeros_like"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_2/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_2"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_2/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/stack/0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/stack"
      op: "Pack"
      input: "transformer/while/strided_slice_26/stack/0"
      input: "transformer/while/Identity"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/stack_1/0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/stack_1"
      op: "Pack"
      input: "transformer/while/strided_slice_26/stack_1/0"
      input: "transformer/while/add_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26"
      op: "StridedSlice"
      input: "transformer/while/strided_slice_26/Enter"
      input: "transformer/while/strided_slice_26/stack"
      input: "transformer/while/strided_slice_26/stack_1"
      input: "transformer/while/strided_slice_26/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/Enter"
      op: "Enter"
      input: "transformer/get_timing_signal_1d/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/add_3"
      op: "Add"
      input: "transformer/while/cond/Merge"
      input: "transformer/while/strided_slice_26"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_4/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_4"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_4/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_5/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_5"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_5/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack/0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack"
      op: "Pack"
      input: "transformer/while/strided_slice_27/stack/0"
      input: "transformer/while/strided_slice_27/stack/1"
      input: "transformer/while/Identity"
      input: "transformer/while/strided_slice_27/stack/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack_1/0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack_1/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack_1"
      op: "Pack"
      input: "transformer/while/strided_slice_27/stack_1/0"
      input: "transformer/while/strided_slice_27/stack_1/1"
      input: "transformer/while/add_4"
      input: "transformer/while/add_5"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27"
      op: "StridedSlice"
      input: "transformer/while/strided_slice_27/Enter"
      input: "transformer/while/strided_slice_27/stack"
      input: "transformer/while/strided_slice_27/stack_1"
      input: "transformer/while/strided_slice_27/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 11
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/Enter"
      op: "Enter"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/add_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_59"
      op: "Identity"
      input: "Identity_59/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_59/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_60"
      op: "Identity"
      input: "Identity_60/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_60/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/add_3"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/add_3"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/while/add_3"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul"
      input: "Identity_59"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_60"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1987
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_61"
      op: "Identity"
      input: "Identity_61/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_61/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_61"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2038
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_62"
      op: "Identity"
      input: "Identity_62/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_62/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_62"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2089
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_63"
      op: "Identity"
      input: "Identity_63/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_63/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_63"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      op: "ConcatV2"
      input: "transformer/while/Reshape_3"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      op: "ConcatV2"
      input: "transformer/while/Reshape_4"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1767766922712326
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/while/strided_slice_27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_1"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/begin"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/size"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice"
      op: "Slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/begin"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/values_0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/values_0"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Softmax"
      op: "Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2223
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_64"
      op: "Identity"
      input: "Identity_64/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_64/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_64"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/while/add_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_65"
      op: "Identity"
      input: "Identity_65/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_65/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_66"
      op: "Identity"
      input: "Identity_66/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_66/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul"
      input: "Identity_65"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_66"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2310
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_67"
      op: "Identity"
      input: "Identity_67/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_67/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_67"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2361
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_68"
      op: "Identity"
      input: "Identity_68/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_68/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/Reshape_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/Reshape_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_68"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2412
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_69"
      op: "Identity"
      input: "Identity_69/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_69/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/Reshape_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/Reshape_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_69"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1767766922712326
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/while/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Shape_1"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Sub/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice/begin"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Sub"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice/size"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice"
      op: "Slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Shape_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice/begin"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat/values_0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat/values_0"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Softmax"
      op: "Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2542
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_70"
      op: "Identity"
      input: "Identity_70/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_70/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_70"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_71"
      op: "Identity"
      input: "Identity_71/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_71/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_72"
      op: "Identity"
      input: "Identity_72/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_72/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul"
      input: "Identity_71"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_72"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2629
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_73"
      op: "Identity"
      input: "Identity_73/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_73/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_74"
      op: "Identity"
      input: "Identity_74/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_74/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_73"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/BiasAdd"
      op: "BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot"
      input: "Identity_74"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Relu"
      op: "Relu"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2688
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_75"
      op: "Identity"
      input: "Identity_75/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_75/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_76"
      op: "Identity"
      input: "Identity_76/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_76/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Relu"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_75"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/BiasAdd"
      op: "BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot"
      input: "Identity_76"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_77"
      op: "Identity"
      input: "Identity_77/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_77/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_78"
      op: "Identity"
      input: "Identity_78/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_78/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul"
      input: "Identity_77"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_78"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2782
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_79"
      op: "Identity"
      input: "Identity_79/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_79/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_79"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2833
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_80"
      op: "Identity"
      input: "Identity_80/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_80/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_80"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 2884
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_81"
      op: "Identity"
      input: "Identity_81/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_81/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_81"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      op: "ConcatV2"
      input: "transformer/while/Reshape_5"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      op: "ConcatV2"
      input: "transformer/while/Reshape_6"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1767766922712326
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/while/strided_slice_27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_1"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/begin"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/size"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice"
      op: "Slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/begin"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/values_0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/values_0"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Softmax"
      op: "Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3018
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_82"
      op: "Identity"
      input: "Identity_82/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_82/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_82"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_83"
      op: "Identity"
      input: "Identity_83/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_83/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_84"
      op: "Identity"
      input: "Identity_84/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_84/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul"
      input: "Identity_83"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_84"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3105
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_85"
      op: "Identity"
      input: "Identity_85/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_85/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_85"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3156
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_86"
      op: "Identity"
      input: "Identity_86/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_86/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/Reshape_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/Reshape_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_86"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3207
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_87"
      op: "Identity"
      input: "Identity_87/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_87/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/Reshape_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/Reshape_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_87"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 32
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.1767766922712326
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/while/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Shape_1"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Sub/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Sub/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice/begin"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Sub"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice/size"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice"
      op: "Slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Shape_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice/begin"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat/values_0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat/values_0"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Softmax"
      op: "Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
      attr {
        key: "adj_x"
        value {
          b: false
        }
      }
      attr {
        key: "adj_y"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 32
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3337
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_88"
      op: "Identity"
      input: "Identity_88/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_88/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_88"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_89"
      op: "Identity"
      input: "Identity_89/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_89/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_90"
      op: "Identity"
      input: "Identity_90/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_90/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul"
      input: "Identity_89"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_90"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3424
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_91"
      op: "Identity"
      input: "Identity_91/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_91/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 512
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_92"
      op: "Identity"
      input: "Identity_92/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_92/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_91"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\002\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 512
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/BiasAdd"
      op: "BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot"
      input: "Identity_92"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Relu"
      op: "Relu"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0883883461356163
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 1234
        }
      }
      attr {
        key: "seed2"
        value {
          i: 3483
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 512
            }
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_93"
      op: "Identity"
      input: "Identity_93/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_93/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_94"
      op: "Identity"
      input: "Identity_94/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_94/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Rank"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/GreaterEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/GreaterEqual"
      op: "GreaterEqual"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/GreaterEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Cast"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/GreaterEqual"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/axes"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Less"
      op: "Less"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Cast_1"
      op: "Cast"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Less"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Rank"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Cast_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range"
      op: "Range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range/start"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Rank"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/ListDiff"
      op: "ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/add_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "out_idx"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/ListDiff"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather_1"
      op: "Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/add_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/ListDiff"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Relu"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose_1"
      op: "Transpose"
      input: "Identity_93"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tperm"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_2"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/BiasAdd"
      op: "BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot"
      input: "Identity_94"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_postprocess/dropout/keep_prob"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_95"
      op: "Identity"
      input: "Identity_95/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_95/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_96"
      op: "Identity"
      input: "Identity_96/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_96/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Cast/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Square"
      op: "Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Square"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub_1"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Cast/x"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul"
      input: "Identity_95"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul_1"
      input: "Identity_96"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/ExpandDims/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/ExpandDims"
      op: "ExpandDims"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Shape"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack_1"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Shape"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack_1"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Identity_97"
      op: "Identity"
      input: "Identity_43/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_98"
      op: "Identity"
      input: "Identity_44/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_99"
      op: "Identity"
      input: "Identity_45/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_100"
      op: "Identity"
      input: "Identity_46/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_101"
      op: "Identity"
      input: "Identity_47/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_102"
      op: "Identity"
      input: "Identity_48/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_103"
      op: "Identity"
      input: "Identity_49/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_104"
      op: "Identity"
      input: "Identity_50/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_105"
      op: "Identity"
      input: "Identity_51/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_106"
      op: "Identity"
      input: "Identity_52/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_107"
      op: "Identity"
      input: "Identity_53/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_108"
      op: "Identity"
      input: "Identity_54/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_109"
      op: "Identity"
      input: "Identity_55/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_110"
      op: "Identity"
      input: "Identity_56/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_111"
      op: "Identity"
      input: "Identity_57/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "Identity_112"
      op: "Identity"
      input: "Identity_58/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/concat"
      op: "ConcatV2"
      input: "Identity_97"
      input: "Identity_98"
      input: "Identity_99"
      input: "Identity_100"
      input: "Identity_101"
      input: "Identity_102"
      input: "Identity_103"
      input: "Identity_104"
      input: "Identity_105"
      input: "Identity_106"
      input: "Identity_107"
      input: "Identity_108"
      input: "Identity_109"
      input: "Identity_110"
      input: "Identity_111"
      input: "Identity_112"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/concat/axis"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2857
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/convert_gradient_to_tensor_cc661786"
      op: "convert_gradient_to_tensor_cc661786"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/concat"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2857
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/ExpandDims"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/MatMul"
      op: "MatMul"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/convert_gradient_to_tensor_cc661786"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 2857
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2857
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape"
      op: "Pack"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/2"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/3"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1"
      op: "Reshape"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/MatMul"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 2857
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Squeeze"
      op: "Squeeze"
      input: "transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 2857
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_8"
      op: "Shape"
      input: "transformer/while/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_28/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_28/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_28/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_28"
      op: "StridedSlice"
      input: "transformer/while/Shape_8"
      input: "transformer/while/strided_slice_28/stack"
      input: "transformer/while/strided_slice_28/stack_1"
      input: "transformer/while/strided_slice_28/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_29/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_29/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_29/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_29"
      op: "StridedSlice"
      input: "transformer/while/Shape_8"
      input: "transformer/while/strided_slice_29/stack"
      input: "transformer/while/strided_slice_29/stack_1"
      input: "transformer/while/strided_slice_29/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_30/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_30/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_30/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_30"
      op: "StridedSlice"
      input: "transformer/while/Shape_8"
      input: "transformer/while/strided_slice_30/stack"
      input: "transformer/while/strided_slice_30/stack_1"
      input: "transformer/while/strided_slice_30/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_31/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_31/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_31/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_31"
      op: "StridedSlice"
      input: "transformer/while/Shape_8"
      input: "transformer/while/strided_slice_31/stack"
      input: "transformer/while/strided_slice_31/stack_1"
      input: "transformer/while/strided_slice_31/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_8/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_8/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_8/shape/1"
      input: "transformer/while/strided_slice_29"
      input: "transformer/while/strided_slice_30"
      input: "transformer/while/strided_slice_31"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_8"
      op: "Reshape"
      input: "transformer/while/Reshape_1"
      input: "transformer/while/Reshape_8/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_9"
      op: "Shape"
      input: "transformer/while/Reshape_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_32/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_32/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_32/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_32"
      op: "StridedSlice"
      input: "transformer/while/Shape_9"
      input: "transformer/while/strided_slice_32/stack"
      input: "transformer/while/strided_slice_32/stack_1"
      input: "transformer/while/strided_slice_32/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_33/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_33/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_33/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_33"
      op: "StridedSlice"
      input: "transformer/while/Shape_9"
      input: "transformer/while/strided_slice_33/stack"
      input: "transformer/while/strided_slice_33/stack_1"
      input: "transformer/while/strided_slice_33/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_9/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_9/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_9/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_9/shape/1"
      input: "transformer/while/strided_slice_33"
      input: "transformer/while/Reshape_9/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_9"
      op: "Reshape"
      input: "transformer/while/Reshape_2"
      input: "transformer/while/Reshape_9/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_10"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_34/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_34/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_34/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_34"
      op: "StridedSlice"
      input: "transformer/while/Shape_10"
      input: "transformer/while/strided_slice_34/stack"
      input: "transformer/while/strided_slice_34/stack_1"
      input: "transformer/while/strided_slice_34/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_35/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_35/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_35/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_35"
      op: "StridedSlice"
      input: "transformer/while/Shape_10"
      input: "transformer/while/strided_slice_35/stack"
      input: "transformer/while/strided_slice_35/stack_1"
      input: "transformer/while/strided_slice_35/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_10/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_10/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_10/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_10/shape/1"
      input: "transformer/while/strided_slice_35"
      input: "transformer/while/Reshape_10/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_10"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      input: "transformer/while/Reshape_10/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_11"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_36/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_36/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_36/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_36"
      op: "StridedSlice"
      input: "transformer/while/Shape_11"
      input: "transformer/while/strided_slice_36/stack"
      input: "transformer/while/strided_slice_36/stack_1"
      input: "transformer/while/strided_slice_36/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_37/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_37/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_37/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_37"
      op: "StridedSlice"
      input: "transformer/while/Shape_11"
      input: "transformer/while/strided_slice_37/stack"
      input: "transformer/while/strided_slice_37/stack_1"
      input: "transformer/while/strided_slice_37/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_11/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_11/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_11/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_11/shape/1"
      input: "transformer/while/strided_slice_37"
      input: "transformer/while/Reshape_11/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_11"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      input: "transformer/while/Reshape_11/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_12"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_38/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_38/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_38/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_38"
      op: "StridedSlice"
      input: "transformer/while/Shape_12"
      input: "transformer/while/strided_slice_38/stack"
      input: "transformer/while/strided_slice_38/stack_1"
      input: "transformer/while/strided_slice_38/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_39/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_39/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_39/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_39"
      op: "StridedSlice"
      input: "transformer/while/Shape_12"
      input: "transformer/while/strided_slice_39/stack"
      input: "transformer/while/strided_slice_39/stack_1"
      input: "transformer/while/strided_slice_39/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_12/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_12/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_12/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_12/shape/1"
      input: "transformer/while/strided_slice_39"
      input: "transformer/while/Reshape_12/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_12"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      input: "transformer/while/Reshape_12/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_13"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_40/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_40/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_40/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_40"
      op: "StridedSlice"
      input: "transformer/while/Shape_13"
      input: "transformer/while/strided_slice_40/stack"
      input: "transformer/while/strided_slice_40/stack_1"
      input: "transformer/while/strided_slice_40/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_41/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_41/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_41/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_41"
      op: "StridedSlice"
      input: "transformer/while/Shape_13"
      input: "transformer/while/strided_slice_41/stack"
      input: "transformer/while/strided_slice_41/stack_1"
      input: "transformer/while/strided_slice_41/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_13/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_13/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_13/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_13/shape/1"
      input: "transformer/while/strided_slice_41"
      input: "transformer/while/Reshape_13/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_13"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      input: "transformer/while/Reshape_13/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_14/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_14/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_14/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_14/shape/1"
      input: "transformer/while/Reshape_14/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_14"
      op: "Reshape"
      input: "transformer/while/Squeeze"
      input: "transformer/while/Reshape_14/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Max/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Max"
      op: "Max"
      input: "transformer/while/Reshape_14"
      input: "transformer/while/ReduceLogSumExp/Max/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/IsFinite"
      op: "IsFinite"
      input: "transformer/while/ReduceLogSumExp/Max"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/zeros_like"
      op: "ZerosLike"
      input: "transformer/while/ReduceLogSumExp/Max"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Select"
      op: "Select"
      input: "transformer/while/ReduceLogSumExp/IsFinite"
      input: "transformer/while/ReduceLogSumExp/Max"
      input: "transformer/while/ReduceLogSumExp/zeros_like"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/StopGradient"
      op: "StopGradient"
      input: "transformer/while/ReduceLogSumExp/Select"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/sub"
      op: "Sub"
      input: "transformer/while/Reshape_14"
      input: "transformer/while/ReduceLogSumExp/StopGradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Exp"
      op: "Exp"
      input: "transformer/while/ReduceLogSumExp/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Sum/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Sum"
      op: "Sum"
      input: "transformer/while/ReduceLogSumExp/Exp"
      input: "transformer/while/ReduceLogSumExp/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Log"
      op: "Log"
      input: "transformer/while/ReduceLogSumExp/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/add"
      op: "Add"
      input: "transformer/while/ReduceLogSumExp/Log"
      input: "transformer/while/ReduceLogSumExp/StopGradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/sub_1"
      op: "Sub"
      input: "transformer/while/Reshape_14"
      input: "transformer/while/ReduceLogSumExp/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_2/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_2"
      op: "ExpandDims"
      input: "transformer/while/Identity_2"
      input: "transformer/while/ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_6"
      op: "Add"
      input: "transformer/while/sub_1"
      input: "transformer/while/ExpandDims_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_7/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_7"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_7/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat_3"
      op: "Cast"
      input: "transformer/while/add_7"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_8/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 5.0
          }
        }
      }
    }
    node {
      name: "transformer/while/add_8"
      op: "Add"
      input: "transformer/while/add_8/x"
      input: "transformer/while/ToFloat_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv_2/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 6.0
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv_2"
      op: "RealDiv"
      input: "transformer/while/add_8"
      input: "transformer/while/truediv_2/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Pow_1/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/Pow_1"
      op: "Pow"
      input: "transformer/while/truediv_2"
      input: "transformer/while/Pow_1/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv_3"
      op: "RealDiv"
      input: "transformer/while/add_6"
      input: "transformer/while/Pow_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_15/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\244,\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_15"
      op: "Reshape"
      input: "transformer/while/truediv_3"
      input: "transformer/while/Reshape_15/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 11428
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2/k"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2"
      op: "TopKV2"
      input: "transformer/while/Reshape_15"
      input: "transformer/while/TopKV2/k"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
      attr {
        key: "sorted"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/mul_10"
      op: "Mul"
      input: "transformer/while/TopKV2"
      input: "transformer/while/Pow_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2857
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv"
      op: "FloorDiv"
      input: "transformer/while/TopKV2:1"
      input: "transformer/while/floordiv/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mod/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2857
          }
        }
      }
    }
    node {
      name: "transformer/while/mod"
      op: "FloorMod"
      input: "transformer/while/TopKV2:1"
      input: "transformer/while/mod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_11/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_11"
      op: "Mul"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/mul_11/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/range"
      op: "Range"
      input: "transformer/while/range/start"
      input: "transformer/while/mul_11"
      input: "transformer/while/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_1/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_1"
      op: "FloorDiv"
      input: "transformer/while/range"
      input: "transformer/while/floordiv_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_16/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_16/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_16/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_16"
      op: "Reshape"
      input: "transformer/while/floordiv_1"
      input: "transformer/while/Reshape_16/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/stack"
      op: "Pack"
      input: "transformer/while/Reshape_16"
      input: "transformer/while/floordiv"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/while/GatherNd"
      op: "GatherNd"
      input: "transformer/while/Identity_1"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_1"
      op: "GatherNd"
      input: "transformer/while/Reshape_8"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_2"
      op: "GatherNd"
      input: "transformer/while/Reshape_9"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_3"
      op: "GatherNd"
      input: "transformer/while/Reshape_10"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_4"
      op: "GatherNd"
      input: "transformer/while/Reshape_11"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_5"
      op: "GatherNd"
      input: "transformer/while/Reshape_12"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_6"
      op: "GatherNd"
      input: "transformer/while/Reshape_13"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_3/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_3"
      op: "ExpandDims"
      input: "transformer/while/mod"
      input: "transformer/while/ExpandDims_3/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/concat"
      op: "ConcatV2"
      input: "transformer/while/GatherNd"
      input: "transformer/while/ExpandDims_3"
      input: "transformer/while/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Equal_1/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/Equal_1"
      op: "Equal"
      input: "transformer/while/mod"
      input: "transformer/while/Equal_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat_4"
      op: "Cast"
      input: "transformer/while/Equal_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_12/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -10000000.0
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_12"
      op: "Mul"
      input: "transformer/while/ToFloat_4"
      input: "transformer/while/mul_12/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_9"
      op: "Add"
      input: "transformer/while/TopKV2"
      input: "transformer/while/mul_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2_1/k"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2_1"
      op: "TopKV2"
      input: "transformer/while/add_9"
      input: "transformer/while/TopKV2_1/k"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "sorted"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/mul_13/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_13"
      op: "Mul"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/mul_13/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/range_1/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/range_1/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/range_1"
      op: "Range"
      input: "transformer/while/range_1/start"
      input: "transformer/while/mul_13"
      input: "transformer/while/range_1/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_2/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_2"
      op: "FloorDiv"
      input: "transformer/while/range_1"
      input: "transformer/while/floordiv_2/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_17/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_17/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_17/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_17"
      op: "Reshape"
      input: "transformer/while/floordiv_2"
      input: "transformer/while/Reshape_17/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/stack_1"
      op: "Pack"
      input: "transformer/while/Reshape_17"
      input: "transformer/while/TopKV2_1:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_seq"
      op: "GatherNd"
      input: "transformer/while/concat"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_flags"
      op: "GatherNd"
      input: "transformer/while/Equal_1"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_scores"
      op: "GatherNd"
      input: "transformer/while/mul_10"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states"
      op: "GatherNd"
      input: "transformer/while/GatherNd_1"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_1"
      op: "GatherNd"
      input: "transformer/while/GatherNd_2"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_2"
      op: "GatherNd"
      input: "transformer/while/GatherNd_3"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_3"
      op: "GatherNd"
      input: "transformer/while/GatherNd_4"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_4"
      op: "GatherNd"
      input: "transformer/while/GatherNd_5"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_5"
      op: "GatherNd"
      input: "transformer/while/GatherNd_6"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/zeros/shape/1"
      input: "transformer/while/zeros/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/zeros/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros"
      op: "Fill"
      input: "transformer/while/zeros/shape"
      input: "transformer/while/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_1"
      op: "ConcatV2"
      input: "transformer/while/Identity_3"
      input: "transformer/while/zeros"
      input: "transformer/while/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat_5"
      op: "Cast"
      input: "transformer/while/Equal_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/sub_2/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/sub_2"
      op: "Sub"
      input: "transformer/while/sub_2/x"
      input: "transformer/while/ToFloat_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_14/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -10000000.0
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_14"
      op: "Mul"
      input: "transformer/while/sub_2"
      input: "transformer/while/mul_14/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_10"
      op: "Add"
      input: "transformer/while/TopKV2"
      input: "transformer/while/mul_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_2"
      op: "ConcatV2"
      input: "transformer/while/concat_1"
      input: "transformer/while/concat"
      input: "transformer/while/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 12
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_3/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_3"
      op: "ConcatV2"
      input: "transformer/while/Identity_4"
      input: "transformer/while/add_10"
      input: "transformer/while/concat_3/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 12
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_4/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_4"
      op: "ConcatV2"
      input: "transformer/while/Identity_5"
      input: "transformer/while/Equal_1"
      input: "transformer/while/concat_4/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 12
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2_2/k"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2_2"
      op: "TopKV2"
      input: "transformer/while/concat_3"
      input: "transformer/while/TopKV2_2/k"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "sorted"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/mul_15/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_15"
      op: "Mul"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/mul_15/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/range_2/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/range_2/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/range_2"
      op: "Range"
      input: "transformer/while/range_2/start"
      input: "transformer/while/mul_15"
      input: "transformer/while/range_2/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_3/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_3"
      op: "FloorDiv"
      input: "transformer/while/range_2"
      input: "transformer/while/floordiv_3/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_18/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_18/shape"
      op: "Pack"
      input: "transformer/while/mul_2/Enter"
      input: "transformer/while/Reshape_18/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "transformer/while/Reshape_18"
      op: "Reshape"
      input: "transformer/while/floordiv_3"
      input: "transformer/while/Reshape_18/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/stack_2"
      op: "Pack"
      input: "transformer/while/Reshape_18"
      input: "transformer/while/TopKV2_2:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/while/grow_finished_topk_seq"
      op: "GatherNd"
      input: "transformer/while/concat_2"
      input: "transformer/while/stack_2"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_finished_topk_flags"
      op: "GatherNd"
      input: "transformer/while/concat_4"
      input: "transformer/while/stack_2"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_finished_topk_scores"
      op: "GatherNd"
      input: "transformer/while/concat_3"
      input: "transformer/while/stack_2"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_11/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_11"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_11/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration"
      op: "NextIteration"
      input: "transformer/while/add_11"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_1"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_seq"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_2"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_scores"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_3"
      op: "NextIteration"
      input: "transformer/while/grow_finished_topk_seq"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_4"
      op: "NextIteration"
      input: "transformer/while/grow_finished_topk_scores"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_5"
      op: "NextIteration"
      input: "transformer/while/grow_finished_topk_flags"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_6"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_7"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_8"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_9"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_10"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_11"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit"
      op: "Exit"
      input: "transformer/while/Switch"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_1"
      op: "Exit"
      input: "transformer/while/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_2"
      op: "Exit"
      input: "transformer/while/Switch_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_3"
      op: "Exit"
      input: "transformer/while/Switch_3"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_4"
      op: "Exit"
      input: "transformer/while/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_5"
      op: "Exit"
      input: "transformer/while/Switch_5"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_6"
      op: "Exit"
      input: "transformer/while/Switch_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_7"
      op: "Exit"
      input: "transformer/while/Switch_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_8"
      op: "Exit"
      input: "transformer/while/Switch_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_9"
      op: "Exit"
      input: "transformer/while/Switch_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_10"
      op: "Exit"
      input: "transformer/while/Switch_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_11"
      op: "Exit"
      input: "transformer/while/Switch_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Any/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Any"
      op: "Any"
      input: "transformer/while/Exit_5"
      input: "transformer/Any/reduction_indices"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/Select"
      op: "Select"
      input: "transformer/Any"
      input: "transformer/while/Exit_3"
      input: "transformer/while/Exit_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Any_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Any_1"
      op: "Any"
      input: "transformer/while/Exit_5"
      input: "transformer/Any_1/reduction_indices"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "transformer/Select_1"
      op: "Select"
      input: "transformer/Any_1"
      input: "transformer/while/Exit_4"
      input: "transformer/while/Exit_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_10/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_10/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_10/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_10"
      op: "StridedSlice"
      input: "transformer/Select"
      input: "transformer/strided_slice_10/stack"
      input: "transformer/strided_slice_10/stack_1"
      input: "transformer/strided_slice_10/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 5
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/strided_slice_11/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_11/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_11/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_11"
      op: "StridedSlice"
      input: "transformer/Select_1"
      input: "transformer/strided_slice_11/stack"
      input: "transformer/strided_slice_11/stack_1"
      input: "transformer/strided_slice_11/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 2
        }
      }
    }
    node {
      name: "Shape"
      op: "Shape"
      input: "DatasetToSingleElement:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape"
      input: "strided_slice/stack"
      input: "strided_slice/stack_1"
      input: "strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape"
      input: "strided_slice_1/stack"
      input: "strided_slice_1/stack_1"
      input: "strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "ones/shape"
      op: "Pack"
      input: "strided_slice"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "ones/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "ones"
      op: "Fill"
      input: "ones/shape"
      input: "ones/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "mul"
      op: "Mul"
      input: "problem_choice"
      input: "ones"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_369f124c45874488bf8b2b31052e470f/part"
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 86
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 86
              }
            }
            string_val: "global_step"
            string_val: "losses_avg/problem_0/extra_loss"
            string_val: "losses_avg/problem_0/total_loss"
            string_val: "losses_avg/problem_0/training_loss"
            string_val: "train_stats/problem_0_steps"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/bias"
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/bias"
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/bias"
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/bias"
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/bias"
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/bias"
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/bias"
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/bias"
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/target_space_embedding/kernel"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_0"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_1"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_10"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_11"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_12"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_13"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_14"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_15"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_2"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_3"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_4"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_5"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_6"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_7"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_8"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 86
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 86
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "global_step"
      input: "losses_avg/problem_0/extra_loss"
      input: "losses_avg/problem_0/total_loss"
      input: "losses_avg/problem_0/training_loss"
      input: "train_stats/problem_0_steps"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/target_space_embedding/kernel"
      input: "transformer/symbol_modality_2857_256/shared/weights_0"
      input: "transformer/symbol_modality_2857_256/shared/weights_1"
      input: "transformer/symbol_modality_2857_256/shared/weights_10"
      input: "transformer/symbol_modality_2857_256/shared/weights_11"
      input: "transformer/symbol_modality_2857_256/shared/weights_12"
      input: "transformer/symbol_modality_2857_256/shared/weights_13"
      input: "transformer/symbol_modality_2857_256/shared/weights_14"
      input: "transformer/symbol_modality_2857_256/shared/weights_15"
      input: "transformer/symbol_modality_2857_256/shared/weights_2"
      input: "transformer/symbol_modality_2857_256/shared/weights_3"
      input: "transformer/symbol_modality_2857_256/shared/weights_4"
      input: "transformer/symbol_modality_2857_256/shared/weights_5"
      input: "transformer/symbol_modality_2857_256/shared/weights_6"
      input: "transformer/symbol_modality_2857_256/shared/weights_7"
      input: "transformer/symbol_modality_2857_256/shared/weights_8"
      input: "transformer/symbol_modality_2857_256/shared/weights_9"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/control_dependency"
      input: "^save/MergeV2Checkpoints"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "global_step"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "losses_avg/problem_0/extra_loss"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_1/tensor_names"
      input: "save/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_1"
      op: "Assign"
      input: "losses_avg/problem_0/extra_loss"
      input: "save/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/extra_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "losses_avg/problem_0/total_loss"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_2/tensor_names"
      input: "save/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_2"
      op: "Assign"
      input: "losses_avg/problem_0/total_loss"
      input: "save/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/total_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "losses_avg/problem_0/training_loss"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_3/tensor_names"
      input: "save/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_3"
      op: "Assign"
      input: "losses_avg/problem_0/training_loss"
      input: "save/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/training_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train_stats/problem_0_steps"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_4/tensor_names"
      input: "save/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "save/Assign_4"
      op: "Assign"
      input: "train_stats/problem_0_steps"
      input: "save/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train_stats/problem_0_steps"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_5/tensor_names"
      input: "save/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_5"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_6/tensor_names"
      input: "save/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_6"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_7"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_7/tensor_names"
      input: "save/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_7"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_8"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_8/tensor_names"
      input: "save/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_8"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_9"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_9/tensor_names"
      input: "save/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_9"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_10"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_10/tensor_names"
      input: "save/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_10"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_11"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_11/tensor_names"
      input: "save/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_11"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      input: "save/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_12"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_12/tensor_names"
      input: "save/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_12"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      input: "save/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_13"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_13/tensor_names"
      input: "save/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_13"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      input: "save/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_14"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_14/tensor_names"
      input: "save/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_14"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      input: "save/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_15"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_15/tensor_names"
      input: "save/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_15"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_16/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_16/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_16"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_16/tensor_names"
      input: "save/RestoreV2_16/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_16"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_17/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_17/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_17"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_17/tensor_names"
      input: "save/RestoreV2_17/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_17"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_18/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_18/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_18"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_18/tensor_names"
      input: "save/RestoreV2_18/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_18"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_19/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_19/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_19"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_19/tensor_names"
      input: "save/RestoreV2_19/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_19"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_20/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_20/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_20"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_20/tensor_names"
      input: "save/RestoreV2_20/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_20"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_21/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_21/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_21"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_21/tensor_names"
      input: "save/RestoreV2_21/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_21"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_22/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_22/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_22"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_22/tensor_names"
      input: "save/RestoreV2_22/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_22"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_23/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_23/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_23"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_23/tensor_names"
      input: "save/RestoreV2_23/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_23"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_24/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_24/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_24"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_24/tensor_names"
      input: "save/RestoreV2_24/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_24"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_25/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_25/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_25"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_25/tensor_names"
      input: "save/RestoreV2_25/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_25"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2_25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_26/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_26/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_26"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_26/tensor_names"
      input: "save/RestoreV2_26/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_26"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2_26"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_27/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_27/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_27"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_27/tensor_names"
      input: "save/RestoreV2_27/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_27"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2_27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_28/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_28/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_28"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_28/tensor_names"
      input: "save/RestoreV2_28/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_28"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2_28"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_29/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_29/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_29"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_29/tensor_names"
      input: "save/RestoreV2_29/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_29"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      input: "save/RestoreV2_29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_30/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_30/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_30"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_30/tensor_names"
      input: "save/RestoreV2_30/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_30"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      input: "save/RestoreV2_30"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_31/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_31/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_31"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_31/tensor_names"
      input: "save/RestoreV2_31/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_31"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      input: "save/RestoreV2_31"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_32/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_32/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_32"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_32/tensor_names"
      input: "save/RestoreV2_32/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_32"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      input: "save/RestoreV2_32"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_33/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_33/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_33"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_33/tensor_names"
      input: "save/RestoreV2_33/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_33"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_33"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_34/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_34/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_34"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_34/tensor_names"
      input: "save/RestoreV2_34/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_34"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_34"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_35/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_35/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_35"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_35/tensor_names"
      input: "save/RestoreV2_35/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_35"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_35"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_36/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_36/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_36"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_36/tensor_names"
      input: "save/RestoreV2_36/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_36"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_36"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_37/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_37/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_37"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_37/tensor_names"
      input: "save/RestoreV2_37/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_37"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2_37"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_38/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_38/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_38"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_38/tensor_names"
      input: "save/RestoreV2_38/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_38"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2_38"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_39/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_39/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_39"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_39/tensor_names"
      input: "save/RestoreV2_39/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_39"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2_39"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_40/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_40/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_40"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_40/tensor_names"
      input: "save/RestoreV2_40/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_40"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2_40"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_41/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_41/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_41"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_41/tensor_names"
      input: "save/RestoreV2_41/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_41"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_41"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_42/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_42/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_42"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_42/tensor_names"
      input: "save/RestoreV2_42/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_42"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_42"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_43/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_43/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_43"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_43/tensor_names"
      input: "save/RestoreV2_43/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_43"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      input: "save/RestoreV2_43"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_44/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_44/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_44"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_44/tensor_names"
      input: "save/RestoreV2_44/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_44"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      input: "save/RestoreV2_44"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_45/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_45/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_45"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_45/tensor_names"
      input: "save/RestoreV2_45/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_45"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      input: "save/RestoreV2_45"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_46/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_46/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_46"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_46/tensor_names"
      input: "save/RestoreV2_46/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_46"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      input: "save/RestoreV2_46"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_47/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_47/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_47"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_47/tensor_names"
      input: "save/RestoreV2_47/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_47"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_47"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_48/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_48/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_48"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_48/tensor_names"
      input: "save/RestoreV2_48/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_48"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_48"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_49/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_49/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_49"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_49/tensor_names"
      input: "save/RestoreV2_49/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_49"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_49"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_50/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_50/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_50"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_50/tensor_names"
      input: "save/RestoreV2_50/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_50"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_50"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_51/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_51/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_51"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_51/tensor_names"
      input: "save/RestoreV2_51/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_51"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2_51"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_52/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_52/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_52"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_52/tensor_names"
      input: "save/RestoreV2_52/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_52"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2_52"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_53/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_53/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_53"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_53/tensor_names"
      input: "save/RestoreV2_53/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_53"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2_53"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_54/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_54/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_54"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_54/tensor_names"
      input: "save/RestoreV2_54/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_54"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2_54"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_55/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_55/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_55"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_55/tensor_names"
      input: "save/RestoreV2_55/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_55"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      input: "save/RestoreV2_55"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_56/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_56/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_56"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_56/tensor_names"
      input: "save/RestoreV2_56/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_56"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      input: "save/RestoreV2_56"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_57/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_57/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_57"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_57/tensor_names"
      input: "save/RestoreV2_57/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_57"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      input: "save/RestoreV2_57"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_58/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_58/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_58"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_58/tensor_names"
      input: "save/RestoreV2_58/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_58"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      input: "save/RestoreV2_58"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_59/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_59/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_59"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_59/tensor_names"
      input: "save/RestoreV2_59/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_59"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_59"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_60/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_60/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_60"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_60/tensor_names"
      input: "save/RestoreV2_60/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_60"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_60"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_61/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_61/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_61"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_61/tensor_names"
      input: "save/RestoreV2_61/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_61"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_61"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_62/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_62/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_62"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_62/tensor_names"
      input: "save/RestoreV2_62/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_62"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_62"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_63/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_63/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_63"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_63/tensor_names"
      input: "save/RestoreV2_63/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_63"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2_63"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_64/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_64/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_64"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_64/tensor_names"
      input: "save/RestoreV2_64/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_64"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2_64"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_65/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_65/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_65"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_65/tensor_names"
      input: "save/RestoreV2_65/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_65"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2_65"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_66/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_66/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_66"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_66/tensor_names"
      input: "save/RestoreV2_66/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_66"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2_66"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_67/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_67/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_67"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_67/tensor_names"
      input: "save/RestoreV2_67/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_67"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2_67"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_68/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_68/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_68"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_68/tensor_names"
      input: "save/RestoreV2_68/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_68"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2_68"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_69/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/target_space_embedding/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_69/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_69"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_69/tensor_names"
      input: "save/RestoreV2_69/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_69"
      op: "Assign"
      input: "transformer/body/target_space_embedding/kernel"
      input: "save/RestoreV2_69"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_70/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_70/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_70"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_70/tensor_names"
      input: "save/RestoreV2_70/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_70"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_0"
      input: "save/RestoreV2_70"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_71/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_71/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_71"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_71/tensor_names"
      input: "save/RestoreV2_71/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_71"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_1"
      input: "save/RestoreV2_71"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_72/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_72/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_72"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_72/tensor_names"
      input: "save/RestoreV2_72/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_72"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_10"
      input: "save/RestoreV2_72"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_73/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_73/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_73"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_73/tensor_names"
      input: "save/RestoreV2_73/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_73"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_11"
      input: "save/RestoreV2_73"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_74/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_74/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_74"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_74/tensor_names"
      input: "save/RestoreV2_74/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_74"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_12"
      input: "save/RestoreV2_74"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_75/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_75/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_75"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_75/tensor_names"
      input: "save/RestoreV2_75/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_75"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_13"
      input: "save/RestoreV2_75"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_76/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_76/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_76"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_76/tensor_names"
      input: "save/RestoreV2_76/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_76"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_14"
      input: "save/RestoreV2_76"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_77/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_77/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_77"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_77/tensor_names"
      input: "save/RestoreV2_77/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_77"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_15"
      input: "save/RestoreV2_77"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_78/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_78/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_78"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_78/tensor_names"
      input: "save/RestoreV2_78/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_78"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_2"
      input: "save/RestoreV2_78"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_79/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_79/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_79"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_79/tensor_names"
      input: "save/RestoreV2_79/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_79"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_3"
      input: "save/RestoreV2_79"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_80/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_80/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_80"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_80/tensor_names"
      input: "save/RestoreV2_80/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_80"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_4"
      input: "save/RestoreV2_80"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_81/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_81/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_81"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_81/tensor_names"
      input: "save/RestoreV2_81/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_81"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_5"
      input: "save/RestoreV2_81"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_82/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_82/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_82"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_82/tensor_names"
      input: "save/RestoreV2_82/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_82"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_6"
      input: "save/RestoreV2_82"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_83/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_83/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_83"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_83/tensor_names"
      input: "save/RestoreV2_83/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_83"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_7"
      input: "save/RestoreV2_83"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_84/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_84/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_84"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_84/tensor_names"
      input: "save/RestoreV2_84/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_84"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_8"
      input: "save/RestoreV2_84"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_85/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_85/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_85"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_85/tensor_names"
      input: "save/RestoreV2_85/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_85"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_9"
      input: "save/RestoreV2_85"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/Assign"
      input: "^save/Assign_1"
      input: "^save/Assign_2"
      input: "^save/Assign_3"
      input: "^save/Assign_4"
      input: "^save/Assign_5"
      input: "^save/Assign_6"
      input: "^save/Assign_7"
      input: "^save/Assign_8"
      input: "^save/Assign_9"
      input: "^save/Assign_10"
      input: "^save/Assign_11"
      input: "^save/Assign_12"
      input: "^save/Assign_13"
      input: "^save/Assign_14"
      input: "^save/Assign_15"
      input: "^save/Assign_16"
      input: "^save/Assign_17"
      input: "^save/Assign_18"
      input: "^save/Assign_19"
      input: "^save/Assign_20"
      input: "^save/Assign_21"
      input: "^save/Assign_22"
      input: "^save/Assign_23"
      input: "^save/Assign_24"
      input: "^save/Assign_25"
      input: "^save/Assign_26"
      input: "^save/Assign_27"
      input: "^save/Assign_28"
      input: "^save/Assign_29"
      input: "^save/Assign_30"
      input: "^save/Assign_31"
      input: "^save/Assign_32"
      input: "^save/Assign_33"
      input: "^save/Assign_34"
      input: "^save/Assign_35"
      input: "^save/Assign_36"
      input: "^save/Assign_37"
      input: "^save/Assign_38"
      input: "^save/Assign_39"
      input: "^save/Assign_40"
      input: "^save/Assign_41"
      input: "^save/Assign_42"
      input: "^save/Assign_43"
      input: "^save/Assign_44"
      input: "^save/Assign_45"
      input: "^save/Assign_46"
      input: "^save/Assign_47"
      input: "^save/Assign_48"
      input: "^save/Assign_49"
      input: "^save/Assign_50"
      input: "^save/Assign_51"
      input: "^save/Assign_52"
      input: "^save/Assign_53"
      input: "^save/Assign_54"
      input: "^save/Assign_55"
      input: "^save/Assign_56"
      input: "^save/Assign_57"
      input: "^save/Assign_58"
      input: "^save/Assign_59"
      input: "^save/Assign_60"
      input: "^save/Assign_61"
      input: "^save/Assign_62"
      input: "^save/Assign_63"
      input: "^save/Assign_64"
      input: "^save/Assign_65"
      input: "^save/Assign_66"
      input: "^save/Assign_67"
      input: "^save/Assign_68"
      input: "^save/Assign_69"
      input: "^save/Assign_70"
      input: "^save/Assign_71"
      input: "^save/Assign_72"
      input: "^save/Assign_73"
      input: "^save/Assign_74"
      input: "^save/Assign_75"
      input: "^save/Assign_76"
      input: "^save/Assign_77"
      input: "^save/Assign_78"
      input: "^save/Assign_79"
      input: "^save/Assign_80"
      input: "^save/Assign_81"
      input: "^save/Assign_82"
      input: "^save/Assign_83"
      input: "^save/Assign_84"
      input: "^save/Assign_85"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    node {
      name: "init"
      op: "NoOp"
    }
    node {
      name: "init_all_tables"
      op: "NoOp"
    }
    node {
      name: "init_1"
      op: "NoOp"
    }
    node {
      name: "group_deps"
      op: "NoOp"
      input: "^init"
      input: "^init_all_tables"
      input: "^init_1"
    }
    node {
      name: "save_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_9fd41c50e8af438bb2d34e5f8aaa7258/part"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin"
      op: "StringJoin"
      input: "save_1/Const"
      input: "save_1/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save_1/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename"
      op: "ShardedFilename"
      input: "save_1/StringJoin"
      input: "save_1/ShardedFilename/shard"
      input: "save_1/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 86
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 86
              }
            }
            string_val: "global_step"
            string_val: "losses_avg/problem_0/extra_loss"
            string_val: "losses_avg/problem_0/total_loss"
            string_val: "losses_avg/problem_0/training_loss"
            string_val: "train_stats/problem_0_steps"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/bias"
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/bias"
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/bias"
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/bias"
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/bias"
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/bias"
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/bias"
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/bias"
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/target_space_embedding/kernel"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_0"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_1"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_10"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_11"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_12"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_13"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_14"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_15"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_2"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_3"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_4"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_5"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_6"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_7"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_8"
            string_val: "transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 86
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 86
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2"
      op: "SaveV2"
      input: "save_1/ShardedFilename"
      input: "save_1/SaveV2/tensor_names"
      input: "save_1/SaveV2/shape_and_slices"
      input: "global_step"
      input: "losses_avg/problem_0/extra_loss"
      input: "losses_avg/problem_0/total_loss"
      input: "losses_avg/problem_0/training_loss"
      input: "train_stats/problem_0_steps"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/target_space_embedding/kernel"
      input: "transformer/symbol_modality_2857_256/shared/weights_0"
      input: "transformer/symbol_modality_2857_256/shared/weights_1"
      input: "transformer/symbol_modality_2857_256/shared/weights_10"
      input: "transformer/symbol_modality_2857_256/shared/weights_11"
      input: "transformer/symbol_modality_2857_256/shared/weights_12"
      input: "transformer/symbol_modality_2857_256/shared/weights_13"
      input: "transformer/symbol_modality_2857_256/shared/weights_14"
      input: "transformer/symbol_modality_2857_256/shared/weights_15"
      input: "transformer/symbol_modality_2857_256/shared/weights_2"
      input: "transformer/symbol_modality_2857_256/shared/weights_3"
      input: "transformer/symbol_modality_2857_256/shared/weights_4"
      input: "transformer/symbol_modality_2857_256/shared/weights_5"
      input: "transformer/symbol_modality_2857_256/shared/weights_6"
      input: "transformer/symbol_modality_2857_256/shared/weights_7"
      input: "transformer/symbol_modality_2857_256/shared/weights_8"
      input: "transformer/symbol_modality_2857_256/shared/weights_9"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/control_dependency"
      op: "Identity"
      input: "save_1/ShardedFilename"
      input: "^save_1/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save_1/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save_1/ShardedFilename"
      input: "^save_1/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save_1/Const"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Identity"
      op: "Identity"
      input: "save_1/Const"
      input: "^save_1/control_dependency"
      input: "^save_1/MergeV2Checkpoints"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2/tensor_names"
      input: "save_1/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "save_1/Assign"
      op: "Assign"
      input: "global_step"
      input: "save_1/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "losses_avg/problem_0/extra_loss"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_1/tensor_names"
      input: "save_1/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_1"
      op: "Assign"
      input: "losses_avg/problem_0/extra_loss"
      input: "save_1/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/extra_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "losses_avg/problem_0/total_loss"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_2/tensor_names"
      input: "save_1/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_2"
      op: "Assign"
      input: "losses_avg/problem_0/total_loss"
      input: "save_1/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/total_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "losses_avg/problem_0/training_loss"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_3/tensor_names"
      input: "save_1/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_3"
      op: "Assign"
      input: "losses_avg/problem_0/training_loss"
      input: "save_1/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@losses_avg/problem_0/training_loss"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "train_stats/problem_0_steps"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_4/tensor_names"
      input: "save_1/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "save_1/Assign_4"
      op: "Assign"
      input: "train_stats/problem_0_steps"
      input: "save_1/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@train_stats/problem_0_steps"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_5/tensor_names"
      input: "save_1/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_5"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_6/tensor_names"
      input: "save_1/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_6"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_7"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_7/tensor_names"
      input: "save_1/RestoreV2_7/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_7"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      input: "save_1/RestoreV2_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_8"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_8/tensor_names"
      input: "save_1/RestoreV2_8/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_8"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      input: "save_1/RestoreV2_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_9"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_9/tensor_names"
      input: "save_1/RestoreV2_9/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_9"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      input: "save_1/RestoreV2_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_10"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_10/tensor_names"
      input: "save_1/RestoreV2_10/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_10"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      input: "save_1/RestoreV2_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_11"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_11/tensor_names"
      input: "save_1/RestoreV2_11/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_11"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      input: "save_1/RestoreV2_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_12"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_12/tensor_names"
      input: "save_1/RestoreV2_12/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_12"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      input: "save_1/RestoreV2_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_13"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_13/tensor_names"
      input: "save_1/RestoreV2_13/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_13"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      input: "save_1/RestoreV2_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_14"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_14/tensor_names"
      input: "save_1/RestoreV2_14/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_14"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      input: "save_1/RestoreV2_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_15"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_15/tensor_names"
      input: "save_1/RestoreV2_15/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_15"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_16"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_16/tensor_names"
      input: "save_1/RestoreV2_16/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_16"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_17"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_17/tensor_names"
      input: "save_1/RestoreV2_17/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_17"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_18"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_18/tensor_names"
      input: "save_1/RestoreV2_18/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_18"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_19"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_19/tensor_names"
      input: "save_1/RestoreV2_19/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_19"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "save_1/RestoreV2_19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_20"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_20/tensor_names"
      input: "save_1/RestoreV2_20/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_20"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "save_1/RestoreV2_20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_21"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_21/tensor_names"
      input: "save_1/RestoreV2_21/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_21"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "save_1/RestoreV2_21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_22"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_22/tensor_names"
      input: "save_1/RestoreV2_22/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_22"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "save_1/RestoreV2_22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_23"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_23/tensor_names"
      input: "save_1/RestoreV2_23/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_23"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_24"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_24/tensor_names"
      input: "save_1/RestoreV2_24/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_24"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_25"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_25/tensor_names"
      input: "save_1/RestoreV2_25/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_25"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      input: "save_1/RestoreV2_25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_26/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_26/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_26"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_26/tensor_names"
      input: "save_1/RestoreV2_26/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_26"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      input: "save_1/RestoreV2_26"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_27/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_27/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_27"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_27/tensor_names"
      input: "save_1/RestoreV2_27/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_27"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      input: "save_1/RestoreV2_27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_28/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_28/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_28"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_28/tensor_names"
      input: "save_1/RestoreV2_28/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_28"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      input: "save_1/RestoreV2_28"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_29/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_29/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_29"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_29/tensor_names"
      input: "save_1/RestoreV2_29/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_29"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      input: "save_1/RestoreV2_29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_30/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_30/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_30"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_30/tensor_names"
      input: "save_1/RestoreV2_30/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_30"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      input: "save_1/RestoreV2_30"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_31/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_31/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_31"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_31/tensor_names"
      input: "save_1/RestoreV2_31/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_31"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      input: "save_1/RestoreV2_31"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_32/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_32/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_32"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_32/tensor_names"
      input: "save_1/RestoreV2_32/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_32"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      input: "save_1/RestoreV2_32"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_33/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_33/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_33"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_33/tensor_names"
      input: "save_1/RestoreV2_33/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_33"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_33"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_34/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_34/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_34"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_34/tensor_names"
      input: "save_1/RestoreV2_34/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_34"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_34"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_35/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_35/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_35"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_35/tensor_names"
      input: "save_1/RestoreV2_35/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_35"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_35"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_36/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_36/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_36"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_36/tensor_names"
      input: "save_1/RestoreV2_36/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_36"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_36"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_37/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_37/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_37"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_37/tensor_names"
      input: "save_1/RestoreV2_37/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_37"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "save_1/RestoreV2_37"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_38/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_38/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_38"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_38/tensor_names"
      input: "save_1/RestoreV2_38/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_38"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "save_1/RestoreV2_38"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_39/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_39/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_39"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_39/tensor_names"
      input: "save_1/RestoreV2_39/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_39"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "save_1/RestoreV2_39"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_40/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_40/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_40"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_40/tensor_names"
      input: "save_1/RestoreV2_40/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_40"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "save_1/RestoreV2_40"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_41/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_41/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_41"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_41/tensor_names"
      input: "save_1/RestoreV2_41/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_41"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_41"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_42/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_42/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_42"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_42/tensor_names"
      input: "save_1/RestoreV2_42/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_42"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_42"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_43/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_43/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_43"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_43/tensor_names"
      input: "save_1/RestoreV2_43/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_43"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      input: "save_1/RestoreV2_43"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_44/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_44/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_44"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_44/tensor_names"
      input: "save_1/RestoreV2_44/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_44"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      input: "save_1/RestoreV2_44"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_45/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_45/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_45"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_45/tensor_names"
      input: "save_1/RestoreV2_45/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_45"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      input: "save_1/RestoreV2_45"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_46/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_46/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_46"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_46/tensor_names"
      input: "save_1/RestoreV2_46/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_46"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      input: "save_1/RestoreV2_46"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_47/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_47/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_47"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_47/tensor_names"
      input: "save_1/RestoreV2_47/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_47"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_47"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_48/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_48/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_48"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_48/tensor_names"
      input: "save_1/RestoreV2_48/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_48"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_48"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_49/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_49/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_49"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_49/tensor_names"
      input: "save_1/RestoreV2_49/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_49"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_49"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_50/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_50/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_50"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_50/tensor_names"
      input: "save_1/RestoreV2_50/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_50"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_50"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_51/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_51/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_51"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_51/tensor_names"
      input: "save_1/RestoreV2_51/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_51"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "save_1/RestoreV2_51"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_52/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_52/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_52"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_52/tensor_names"
      input: "save_1/RestoreV2_52/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_52"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "save_1/RestoreV2_52"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_53/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_53/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_53"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_53/tensor_names"
      input: "save_1/RestoreV2_53/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_53"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "save_1/RestoreV2_53"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_54/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_54/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_54"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_54/tensor_names"
      input: "save_1/RestoreV2_54/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_54"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "save_1/RestoreV2_54"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_55/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_55/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_55"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_55/tensor_names"
      input: "save_1/RestoreV2_55/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_55"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      input: "save_1/RestoreV2_55"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_56/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_56/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_56"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_56/tensor_names"
      input: "save_1/RestoreV2_56/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_56"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      input: "save_1/RestoreV2_56"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 512
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_57/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_57/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_57"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_57/tensor_names"
      input: "save_1/RestoreV2_57/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_57"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      input: "save_1/RestoreV2_57"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_58/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_58/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_58"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_58/tensor_names"
      input: "save_1/RestoreV2_58/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_58"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      input: "save_1/RestoreV2_58"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 512
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_59/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_59/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_59"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_59/tensor_names"
      input: "save_1/RestoreV2_59/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_59"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_59"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_60/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_60/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_60"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_60/tensor_names"
      input: "save_1/RestoreV2_60/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_60"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_60"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_61/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_61/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_61"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_61/tensor_names"
      input: "save_1/RestoreV2_61/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_61"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_61"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_62/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_62/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_62"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_62/tensor_names"
      input: "save_1/RestoreV2_62/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_62"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_62"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_63/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_63/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_63"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_63/tensor_names"
      input: "save_1/RestoreV2_63/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_63"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "save_1/RestoreV2_63"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_64/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_64/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_64"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_64/tensor_names"
      input: "save_1/RestoreV2_64/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_64"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "save_1/RestoreV2_64"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_65/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_65/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_65"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_65/tensor_names"
      input: "save_1/RestoreV2_65/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_65"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "save_1/RestoreV2_65"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_66/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_66/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_66"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_66/tensor_names"
      input: "save_1/RestoreV2_66/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_66"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "save_1/RestoreV2_66"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_67/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_67/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_67"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_67/tensor_names"
      input: "save_1/RestoreV2_67/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_67"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save_1/RestoreV2_67"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_68/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_68/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_68"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_68/tensor_names"
      input: "save_1/RestoreV2_68/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_68"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save_1/RestoreV2_68"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_69/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/body/target_space_embedding/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_69/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_69"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_69/tensor_names"
      input: "save_1/RestoreV2_69/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_69"
      op: "Assign"
      input: "transformer/body/target_space_embedding/kernel"
      input: "save_1/RestoreV2_69"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_70/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_70/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_70"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_70/tensor_names"
      input: "save_1/RestoreV2_70/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_70"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_0"
      input: "save_1/RestoreV2_70"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_71/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_71/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_71"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_71/tensor_names"
      input: "save_1/RestoreV2_71/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_71"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_1"
      input: "save_1/RestoreV2_71"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_72/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_72/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_72"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_72/tensor_names"
      input: "save_1/RestoreV2_72/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_72"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_10"
      input: "save_1/RestoreV2_72"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_73/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_73/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_73"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_73/tensor_names"
      input: "save_1/RestoreV2_73/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_73"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_11"
      input: "save_1/RestoreV2_73"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_74/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_74/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_74"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_74/tensor_names"
      input: "save_1/RestoreV2_74/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_74"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_12"
      input: "save_1/RestoreV2_74"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_75/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_75/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_75"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_75/tensor_names"
      input: "save_1/RestoreV2_75/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_75"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_13"
      input: "save_1/RestoreV2_75"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_76/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_76/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_76"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_76/tensor_names"
      input: "save_1/RestoreV2_76/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_76"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_14"
      input: "save_1/RestoreV2_76"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_77/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_77/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_77"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_77/tensor_names"
      input: "save_1/RestoreV2_77/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_77"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_15"
      input: "save_1/RestoreV2_77"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_78/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_78/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_78"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_78/tensor_names"
      input: "save_1/RestoreV2_78/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_78"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_2"
      input: "save_1/RestoreV2_78"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_79/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_79/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_79"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_79/tensor_names"
      input: "save_1/RestoreV2_79/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_79"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_3"
      input: "save_1/RestoreV2_79"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_80/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_80/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_80"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_80/tensor_names"
      input: "save_1/RestoreV2_80/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_80"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_4"
      input: "save_1/RestoreV2_80"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_81/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_81/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_81"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_81/tensor_names"
      input: "save_1/RestoreV2_81/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_81"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_5"
      input: "save_1/RestoreV2_81"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_82/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_82/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_82"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_82/tensor_names"
      input: "save_1/RestoreV2_82/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_82"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_6"
      input: "save_1/RestoreV2_82"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_83/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_83/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_83"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_83/tensor_names"
      input: "save_1/RestoreV2_83/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_83"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_7"
      input: "save_1/RestoreV2_83"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_84/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_84/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_84"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_84/tensor_names"
      input: "save_1/RestoreV2_84/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_84"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_8"
      input: "save_1/RestoreV2_84"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 179
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_85/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_85/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_85"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_85/tensor_names"
      input: "save_1/RestoreV2_85/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_85"
      op: "Assign"
      input: "transformer/symbol_modality_2857_256/shared/weights_9"
      input: "save_1/RestoreV2_85"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_2857_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 178
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/restore_shard"
      op: "NoOp"
      input: "^save_1/Assign"
      input: "^save_1/Assign_1"
      input: "^save_1/Assign_2"
      input: "^save_1/Assign_3"
      input: "^save_1/Assign_4"
      input: "^save_1/Assign_5"
      input: "^save_1/Assign_6"
      input: "^save_1/Assign_7"
      input: "^save_1/Assign_8"
      input: "^save_1/Assign_9"
      input: "^save_1/Assign_10"
      input: "^save_1/Assign_11"
      input: "^save_1/Assign_12"
      input: "^save_1/Assign_13"
      input: "^save_1/Assign_14"
      input: "^save_1/Assign_15"
      input: "^save_1/Assign_16"
      input: "^save_1/Assign_17"
      input: "^save_1/Assign_18"
      input: "^save_1/Assign_19"
      input: "^save_1/Assign_20"
      input: "^save_1/Assign_21"
      input: "^save_1/Assign_22"
      input: "^save_1/Assign_23"
      input: "^save_1/Assign_24"
      input: "^save_1/Assign_25"
      input: "^save_1/Assign_26"
      input: "^save_1/Assign_27"
      input: "^save_1/Assign_28"
      input: "^save_1/Assign_29"
      input: "^save_1/Assign_30"
      input: "^save_1/Assign_31"
      input: "^save_1/Assign_32"
      input: "^save_1/Assign_33"
      input: "^save_1/Assign_34"
      input: "^save_1/Assign_35"
      input: "^save_1/Assign_36"
      input: "^save_1/Assign_37"
      input: "^save_1/Assign_38"
      input: "^save_1/Assign_39"
      input: "^save_1/Assign_40"
      input: "^save_1/Assign_41"
      input: "^save_1/Assign_42"
      input: "^save_1/Assign_43"
      input: "^save_1/Assign_44"
      input: "^save_1/Assign_45"
      input: "^save_1/Assign_46"
      input: "^save_1/Assign_47"
      input: "^save_1/Assign_48"
      input: "^save_1/Assign_49"
      input: "^save_1/Assign_50"
      input: "^save_1/Assign_51"
      input: "^save_1/Assign_52"
      input: "^save_1/Assign_53"
      input: "^save_1/Assign_54"
      input: "^save_1/Assign_55"
      input: "^save_1/Assign_56"
      input: "^save_1/Assign_57"
      input: "^save_1/Assign_58"
      input: "^save_1/Assign_59"
      input: "^save_1/Assign_60"
      input: "^save_1/Assign_61"
      input: "^save_1/Assign_62"
      input: "^save_1/Assign_63"
      input: "^save_1/Assign_64"
      input: "^save_1/Assign_65"
      input: "^save_1/Assign_66"
      input: "^save_1/Assign_67"
      input: "^save_1/Assign_68"
      input: "^save_1/Assign_69"
      input: "^save_1/Assign_70"
      input: "^save_1/Assign_71"
      input: "^save_1/Assign_72"
      input: "^save_1/Assign_73"
      input: "^save_1/Assign_74"
      input: "^save_1/Assign_75"
      input: "^save_1/Assign_76"
      input: "^save_1/Assign_77"
      input: "^save_1/Assign_78"
      input: "^save_1/Assign_79"
      input: "^save_1/Assign_80"
      input: "^save_1/Assign_81"
      input: "^save_1/Assign_82"
      input: "^save_1/Assign_83"
      input: "^save_1/Assign_84"
      input: "^save_1/Assign_85"
    }
    node {
      name: "save_1/restore_all"
      op: "NoOp"
      input: "^save_1/restore_shard"
    }
    library {
      function {
        signature {
          name: "tf_map_func_557edf4e"
          input_arg {
            name: "arg0"
            type: DT_STRING
          }
          output_arg {
            name: "Reshape"
            type: DT_INT64
          }
          output_arg {
            name: "SparseToDense"
            type: DT_INT64
          }
          output_arg {
            name: "SparseToDense_1"
            type: DT_INT64
          }
          description: "A wrapper for Defun that facilitates shape inference."
        }
        node_def {
          name: "ParseSingleExample/ExpandDims/dim"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: 0
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ExpandDims"
          op: "ExpandDims"
          input: "arg0"
          input: "ParseSingleExample/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "Tdim"
            value {
              type: DT_INT32
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseExample/key_batch_prediction_key"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseExample/Reshape/shape"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseExample/Reshape"
          op: "Reshape"
          input: "ParseSingleExample/ParseExample/key_batch_prediction_key:output:0"
          input: "ParseSingleExample/ParseExample/Reshape/shape:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "Tshape"
            value {
              type: DT_INT32
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseExample/ParseExample/names"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseExample/ParseExample/sparse_keys_0"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                }
                string_val: "inputs"
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseExample/ParseExample/sparse_keys_1"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                }
                string_val: "targets"
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseExample/ParseExample/dense_keys_0"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                }
                string_val: "batch_prediction_key"
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseExample/ParseExample"
          op: "ParseExample"
          input: "ParseSingleExample/ExpandDims:output:0"
          input: "ParseSingleExample/ParseExample/ParseExample/names:output:0"
          input: "ParseSingleExample/ParseExample/ParseExample/sparse_keys_0:output:0"
          input: "ParseSingleExample/ParseExample/ParseExample/sparse_keys_1:output:0"
          input: "ParseSingleExample/ParseExample/ParseExample/dense_keys_0:output:0"
          input: "ParseSingleExample/ParseExample/Reshape:output:0"
          attr {
            key: "Ndense"
            value {
              i: 1
            }
          }
          attr {
            key: "Nsparse"
            value {
              i: 2
            }
          }
          attr {
            key: "Tdense"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "dense_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "sparse_types"
            value {
              list {
                type: DT_INT64
                type: DT_INT64
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Squeeze_batch_prediction_key"
          op: "Squeeze"
          input: "ParseSingleExample/ParseExample/ParseExample:dense_values:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "squeeze_dims"
            value {
              list {
                i: 0
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Slice_Indices_inputs/begin"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 2
                  }
                }
                tensor_content: "\000\000\000\000\001\000\000\000"
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Slice_Indices_inputs/size"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 2
                  }
                }
                tensor_content: "\377\377\377\377\377\377\377\377"
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Slice_Indices_inputs"
          op: "Slice"
          input: "ParseSingleExample/ParseExample/ParseExample:sparse_indices:0"
          input: "ParseSingleExample/Slice_Indices_inputs/begin:output:0"
          input: "ParseSingleExample/Slice_Indices_inputs/size:output:0"
          attr {
            key: "Index"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Squeeze_Shape_inputs/begin"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Squeeze_Shape_inputs/size"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Squeeze_Shape_inputs"
          op: "Slice"
          input: "ParseSingleExample/ParseExample/ParseExample:sparse_shapes:0"
          input: "ParseSingleExample/Squeeze_Shape_inputs/begin:output:0"
          input: "ParseSingleExample/Squeeze_Shape_inputs/size:output:0"
          attr {
            key: "Index"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Slice_Indices_targets/begin"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 2
                  }
                }
                tensor_content: "\000\000\000\000\001\000\000\000"
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Slice_Indices_targets/size"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 2
                  }
                }
                tensor_content: "\377\377\377\377\377\377\377\377"
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Slice_Indices_targets"
          op: "Slice"
          input: "ParseSingleExample/ParseExample/ParseExample:sparse_indices:1"
          input: "ParseSingleExample/Slice_Indices_targets/begin:output:0"
          input: "ParseSingleExample/Slice_Indices_targets/size:output:0"
          attr {
            key: "Index"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Squeeze_Shape_targets/begin"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Squeeze_Shape_targets/size"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Squeeze_Shape_targets"
          op: "Slice"
          input: "ParseSingleExample/ParseExample/ParseExample:sparse_shapes:1"
          input: "ParseSingleExample/Squeeze_Shape_targets/begin:output:0"
          input: "ParseSingleExample/Squeeze_Shape_targets/size:output:0"
          attr {
            key: "Index"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
        }
        node_def {
          name: "Reshape/shape"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
        }
        node_def {
          name: "Reshape"
          op: "Reshape"
          input: "ParseSingleExample/Squeeze_batch_prediction_key:output:0"
          input: "Reshape/shape:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "Tshape"
            value {
              type: DT_INT32
            }
          }
        }
        node_def {
          name: "SparseToDense/default_value"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
        }
        node_def {
          name: "SparseToDense"
          op: "SparseToDense"
          input: "ParseSingleExample/Slice_Indices_inputs:output:0"
          input: "ParseSingleExample/Squeeze_Shape_inputs:output:0"
          input: "ParseSingleExample/ParseExample/ParseExample:sparse_values:0"
          input: "SparseToDense/default_value:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "Tindices"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "validate_indices"
            value {
              b: true
            }
          }
        }
        node_def {
          name: "SparseToDense_1/default_value"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
        }
        node_def {
          name: "SparseToDense_1"
          op: "SparseToDense"
          input: "ParseSingleExample/Slice_Indices_targets:output:0"
          input: "ParseSingleExample/Squeeze_Shape_targets:output:0"
          input: "ParseSingleExample/ParseExample/ParseExample:sparse_values:1"
          input: "SparseToDense_1/default_value:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "Tindices"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "validate_indices"
            value {
              b: true
            }
          }
        }
        ret {
          key: "Reshape"
          value: "Reshape:output:0"
        }
        ret {
          key: "SparseToDense"
          value: "SparseToDense:dense:0"
        }
        ret {
          key: "SparseToDense_1"
          value: "SparseToDense_1:dense:0"
        }
      }
      function {
        signature {
          name: "tf_map_func_b6493f56"
          input_arg {
            name: "arg0"
            type: DT_INT64
          }
          input_arg {
            name: "arg1"
            type: DT_INT64
          }
          input_arg {
            name: "arg2"
            type: DT_INT64
          }
          output_arg {
            name: "arg0"
            type: DT_INT64
          }
          output_arg {
            name: "strided_slice"
            type: DT_INT64
          }
          output_arg {
            name: "strided_slice_1"
            type: DT_INT64
          }
          description: "A wrapper for Defun that facilitates shape inference."
        }
        node_def {
          name: "strided_slice/stack"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 0
              }
            }
          }
        }
        node_def {
          name: "strided_slice/stack_1"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 50
              }
            }
          }
        }
        node_def {
          name: "strided_slice/stack_2"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
        }
        node_def {
          name: "strided_slice"
          op: "StridedSlice"
          input: "arg1"
          input: "strided_slice/stack:output:0"
          input: "strided_slice/stack_1:output:0"
          input: "strided_slice/stack_2:output:0"
          attr {
            key: "Index"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "begin_mask"
            value {
              i: 1
            }
          }
          attr {
            key: "ellipsis_mask"
            value {
              i: 0
            }
          }
          attr {
            key: "end_mask"
            value {
              i: 0
            }
          }
          attr {
            key: "new_axis_mask"
            value {
              i: 0
            }
          }
          attr {
            key: "shrink_axis_mask"
            value {
              i: 0
            }
          }
        }
        node_def {
          name: "strided_slice_1/stack"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 0
              }
            }
          }
        }
        node_def {
          name: "strided_slice_1/stack_1"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 60
              }
            }
          }
        }
        node_def {
          name: "strided_slice_1/stack_2"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
        }
        node_def {
          name: "strided_slice_1"
          op: "StridedSlice"
          input: "arg2"
          input: "strided_slice_1/stack:output:0"
          input: "strided_slice_1/stack_1:output:0"
          input: "strided_slice_1/stack_2:output:0"
          attr {
            key: "Index"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "begin_mask"
            value {
              i: 1
            }
          }
          attr {
            key: "ellipsis_mask"
            value {
              i: 0
            }
          }
          attr {
            key: "end_mask"
            value {
              i: 0
            }
          }
          attr {
            key: "new_axis_mask"
            value {
              i: 0
            }
          }
          attr {
            key: "shrink_axis_mask"
            value {
              i: 0
            }
          }
        }
        ret {
          key: "arg0"
          value: "arg0"
        }
        ret {
          key: "strided_slice"
          value: "strided_slice:output:0"
        }
        ret {
          key: "strided_slice_1"
          value: "strided_slice_1:output:0"
        }
      }
      function {
        signature {
          name: "tf_map_func_f2064ac4"
          input_arg {
            name: "arg0"
            type: DT_INT64
          }
          input_arg {
            name: "arg1"
            type: DT_INT64
          }
          input_arg {
            name: "arg2"
            type: DT_INT64
          }
          output_arg {
            name: "arg0"
            type: DT_INT64
          }
          output_arg {
            name: "arg1"
            type: DT_INT64
          }
          output_arg {
            name: "arg2"
            type: DT_INT64
          }
          description: "A wrapper for Defun that facilitates shape inference."
        }
        ret {
          key: "arg0"
          value: "arg0"
        }
        ret {
          key: "arg1"
          value: "arg1"
        }
        ret {
          key: "arg2"
          value: "arg2"
        }
      }
      function {
        signature {
          name: "tf_map_func_3cfa13bc"
          input_arg {
            name: "arg0"
            type: DT_INT64
          }
          input_arg {
            name: "arg1"
            type: DT_INT64
          }
          input_arg {
            name: "arg2"
            type: DT_INT64
          }
          output_arg {
            name: "ToInt32_2"
            type: DT_INT32
          }
          output_arg {
            name: "ToInt32"
            type: DT_INT32
          }
          output_arg {
            name: "ToInt32_1"
            type: DT_INT32
          }
          description: "A wrapper for Defun that facilitates shape inference."
        }
        node_def {
          name: "ToInt32"
          op: "Cast"
          input: "arg1"
          attr {
            key: "DstT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT64
            }
          }
        }
        node_def {
          name: "ToInt32_1"
          op: "Cast"
          input: "arg2"
          attr {
            key: "DstT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT64
            }
          }
        }
        node_def {
          name: "ToInt32_2"
          op: "Cast"
          input: "arg0"
          attr {
            key: "DstT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT64
            }
          }
        }
        ret {
          key: "ToInt32"
          value: "ToInt32:y:0"
        }
        ret {
          key: "ToInt32_1"
          value: "ToInt32_1:y:0"
        }
        ret {
          key: "ToInt32_2"
          value: "ToInt32_2:y:0"
        }
      }
      function {
        signature {
          name: "tf_map_func_13841386"
          input_arg {
            name: "arg0"
            type: DT_INT32
          }
          input_arg {
            name: "arg1"
            type: DT_INT32
          }
          input_arg {
            name: "arg2"
            type: DT_INT32
          }
          output_arg {
            name: "arg0"
            type: DT_INT32
          }
          output_arg {
            name: "ExpandDims_1"
            type: DT_INT32
          }
          output_arg {
            name: "ExpandDims_3"
            type: DT_INT32
          }
          description: "A wrapper for Defun that facilitates shape inference."
        }
        node_def {
          name: "ExpandDims/dim"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ExpandDims"
          op: "ExpandDims"
          input: "arg1"
          input: "ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "Tdim"
            value {
              type: DT_INT32
            }
          }
        }
        node_def {
          name: "ExpandDims_1/dim"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_1"
          op: "ExpandDims"
          input: "ExpandDims:output:0"
          input: "ExpandDims_1/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "Tdim"
            value {
              type: DT_INT32
            }
          }
        }
        node_def {
          name: "ExpandDims_2/dim"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_2"
          op: "ExpandDims"
          input: "arg2"
          input: "ExpandDims_2/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "Tdim"
            value {
              type: DT_INT32
            }
          }
        }
        node_def {
          name: "ExpandDims_3/dim"
          op: "Const"
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_3"
          op: "ExpandDims"
          input: "ExpandDims_2:output:0"
          input: "ExpandDims_3/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "Tdim"
            value {
              type: DT_INT32
            }
          }
        }
        ret {
          key: "ExpandDims_1"
          value: "ExpandDims_1:output:0"
        }
        ret {
          key: "ExpandDims_3"
          value: "ExpandDims_3:output:0"
        }
        ret {
          key: "arg0"
          value: "arg0"
        }
      }
      function {
        signature {
          name: "convert_gradient_to_tensor_cc661786"
          input_arg {
            name: "x"
            type: DT_FLOAT
          }
          output_arg {
            name: "x"
            type: DT_FLOAT
          }
          description: "Identity operation whose gradient is converted to a `Tensor`.\n\n  Currently, the gradient to `tf.concat` is particularly expensive to\n  compute if dy is an `IndexedSlices` (a lack of GPU implementation\n  forces the gradient operation onto CPU).  This situation occurs when\n  the output of the `tf.concat` is eventually passed to `tf.gather`.\n  It is sometimes faster to convert the gradient to a `Tensor`, so as\n  to get the cheaper gradient for `tf.concat`.  To do this, replace\n  `tf.concat(x)` with `convert_gradient_to_tensor(tf.concat(x))`.\n\n  Args:\n    x: A `Tensor`.\n\n  Returns:\n    The input `Tensor`.\n  "
        }
        ret {
          key: "x"
          value: "x"
        }
      }
    }
    versions {
      producer: 24
      min_consumer: 12
    }
  }
  saver_def {
    filename_tensor_name: "save_1/Const:0"
    save_tensor_name: "save_1/Identity:0"
    restore_op_name: "save_1/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "cond_context"
    value {
      bytes_list {
        value: "\n transformer/while/cond/cond_text\022 transformer/while/cond/pred_id:0\032!transformer/while/cond/switch_t:0 \001*\202\002\n\035transformer/while/Reshape_7:0\n transformer/while/cond/pred_id:0\n!transformer/while/cond/switch_t:0\n*transformer/while/cond/zeros_like/Switch:1\n#transformer/while/cond/zeros_like:0\022K\n\035transformer/while/Reshape_7:0\022*transformer/while/cond/zeros_like/Switch:1"
        value: "\n\"transformer/while/cond/cond_text_1\022 transformer/while/cond/pred_id:0\032!transformer/while/cond/switch_f:0*\356\001\n\035transformer/while/Reshape_7:0\n!transformer/while/cond/Switch_1:0\n!transformer/while/cond/Switch_1:1\n transformer/while/cond/pred_id:0\n!transformer/while/cond/switch_f:0\022B\n\035transformer/while/Reshape_7:0\022!transformer/while/cond/Switch_1:0"
      }
    }
  }
  collection_def {
    key: "global_step"
    value {
      node_list {
        value: "global_step:0"
      }
    }
  }
  collection_def {
    key: "legacy_init_op"
    value {
      node_list {
        value: "group_deps"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_0:0\022<transformer/symbol_modality_2857_256/shared/weights_0/Assign\032<transformer/symbol_modality_2857_256/shared/weights_0/read:02Qtransformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_1:0\022<transformer/symbol_modality_2857_256/shared/weights_1/Assign\032<transformer/symbol_modality_2857_256/shared/weights_1/read:02Qtransformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_2:0\022<transformer/symbol_modality_2857_256/shared/weights_2/Assign\032<transformer/symbol_modality_2857_256/shared/weights_2/read:02Qtransformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_3:0\022<transformer/symbol_modality_2857_256/shared/weights_3/Assign\032<transformer/symbol_modality_2857_256/shared/weights_3/read:02Qtransformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_4:0\022<transformer/symbol_modality_2857_256/shared/weights_4/Assign\032<transformer/symbol_modality_2857_256/shared/weights_4/read:02Qtransformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_5:0\022<transformer/symbol_modality_2857_256/shared/weights_5/Assign\032<transformer/symbol_modality_2857_256/shared/weights_5/read:02Qtransformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_6:0\022<transformer/symbol_modality_2857_256/shared/weights_6/Assign\032<transformer/symbol_modality_2857_256/shared/weights_6/read:02Qtransformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_7:0\022<transformer/symbol_modality_2857_256/shared/weights_7/Assign\032<transformer/symbol_modality_2857_256/shared/weights_7/read:02Qtransformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_8:0\022<transformer/symbol_modality_2857_256/shared/weights_8/Assign\032<transformer/symbol_modality_2857_256/shared/weights_8/read:02Qtransformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_9:0\022<transformer/symbol_modality_2857_256/shared/weights_9/Assign\032<transformer/symbol_modality_2857_256/shared/weights_9/read:02Qtransformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_10:0\022=transformer/symbol_modality_2857_256/shared/weights_10/Assign\032=transformer/symbol_modality_2857_256/shared/weights_10/read:02Rtransformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_11:0\022=transformer/symbol_modality_2857_256/shared/weights_11/Assign\032=transformer/symbol_modality_2857_256/shared/weights_11/read:02Rtransformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_12:0\022=transformer/symbol_modality_2857_256/shared/weights_12/Assign\032=transformer/symbol_modality_2857_256/shared/weights_12/read:02Rtransformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_13:0\022=transformer/symbol_modality_2857_256/shared/weights_13/Assign\032=transformer/symbol_modality_2857_256/shared/weights_13/read:02Rtransformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_14:0\022=transformer/symbol_modality_2857_256/shared/weights_14/Assign\032=transformer/symbol_modality_2857_256/shared/weights_14/read:02Rtransformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_15:0\022=transformer/symbol_modality_2857_256/shared/weights_15/Assign\032=transformer/symbol_modality_2857_256/shared/weights_15/read:02Rtransformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal:0"
        value: "\n0transformer/body/target_space_embedding/kernel:0\0225transformer/body/target_space_embedding/kernel/Assign\0325transformer/body/target_space_embedding/kernel/read:02Ktransformer/body/target_space_embedding/kernel/Initializer/random_uniform:0"
        value: "\nbtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\natransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n]transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\nWtransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nVtransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\n3transformer/body/encoder/layer_0/ffn/conv1/kernel:0\0228transformer/body/encoder/layer_0/ffn/conv1/kernel/Assign\0328transformer/body/encoder/layer_0/ffn/conv1/kernel/read:02Ntransformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/encoder/layer_0/ffn/conv1/bias:0\0226transformer/body/encoder/layer_0/ffn/conv1/bias/Assign\0326transformer/body/encoder/layer_0/ffn/conv1/bias/read:02Ctransformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros:0"
        value: "\n3transformer/body/encoder/layer_0/ffn/conv2/kernel:0\0228transformer/body/encoder/layer_0/ffn/conv2/kernel/Assign\0328transformer/body/encoder/layer_0/ffn/conv2/kernel/read:02Ntransformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/encoder/layer_0/ffn/conv2/bias:0\0226transformer/body/encoder/layer_0/ffn/conv2/bias/Assign\0326transformer/body/encoder/layer_0/ffn/conv2/bias/read:02Ctransformer/body/encoder/layer_0/ffn/conv2/bias/Initializer/zeros:0"
        value: "\nbtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\natransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n]transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\nWtransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nVtransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\n3transformer/body/encoder/layer_1/ffn/conv1/kernel:0\0228transformer/body/encoder/layer_1/ffn/conv1/kernel/Assign\0328transformer/body/encoder/layer_1/ffn/conv1/kernel/read:02Ntransformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/encoder/layer_1/ffn/conv1/bias:0\0226transformer/body/encoder/layer_1/ffn/conv1/bias/Assign\0326transformer/body/encoder/layer_1/ffn/conv1/bias/read:02Ctransformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros:0"
        value: "\n3transformer/body/encoder/layer_1/ffn/conv2/kernel:0\0228transformer/body/encoder/layer_1/ffn/conv2/kernel/Assign\0328transformer/body/encoder/layer_1/ffn/conv2/kernel/read:02Ntransformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/encoder/layer_1/ffn/conv2/bias:0\0226transformer/body/encoder/layer_1/ffn/conv2/bias/Assign\0326transformer/body/encoder/layer_1/ffn/conv2/bias/read:02Ctransformer/body/encoder/layer_1/ffn/conv2/bias/Initializer/zeros:0"
        value: "\nKtransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022Ptransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032Ptransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/read:02\\transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nJtransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022Otransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032Otransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/read:02\\transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nbtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\natransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n]transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\ndtransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022itransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032itransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02utransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nctransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022htransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032htransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02utransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n_transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel:0\022dtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Assign\032dtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/read:02ztransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\nWtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nVtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\n3transformer/body/decoder/layer_0/ffn/conv1/kernel:0\0228transformer/body/decoder/layer_0/ffn/conv1/kernel/Assign\0328transformer/body/decoder/layer_0/ffn/conv1/kernel/read:02Ntransformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/decoder/layer_0/ffn/conv1/bias:0\0226transformer/body/decoder/layer_0/ffn/conv1/bias/Assign\0326transformer/body/decoder/layer_0/ffn/conv1/bias/read:02Ctransformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros:0"
        value: "\n3transformer/body/decoder/layer_0/ffn/conv2/kernel:0\0228transformer/body/decoder/layer_0/ffn/conv2/kernel/Assign\0328transformer/body/decoder/layer_0/ffn/conv2/kernel/read:02Ntransformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/decoder/layer_0/ffn/conv2/bias:0\0226transformer/body/decoder/layer_0/ffn/conv2/bias/Assign\0326transformer/body/decoder/layer_0/ffn/conv2/bias/read:02Ctransformer/body/decoder/layer_0/ffn/conv2/bias/Initializer/zeros:0"
        value: "\nbtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\natransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n]transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\ndtransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022itransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032itransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02utransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nctransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022htransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032htransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02utransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n_transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel:0\022dtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Assign\032dtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/read:02ztransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\nWtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nVtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\n3transformer/body/decoder/layer_1/ffn/conv1/kernel:0\0228transformer/body/decoder/layer_1/ffn/conv1/kernel/Assign\0328transformer/body/decoder/layer_1/ffn/conv1/kernel/read:02Ntransformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/decoder/layer_1/ffn/conv1/bias:0\0226transformer/body/decoder/layer_1/ffn/conv1/bias/Assign\0326transformer/body/decoder/layer_1/ffn/conv1/bias/read:02Ctransformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros:0"
        value: "\n3transformer/body/decoder/layer_1/ffn/conv2/kernel:0\0228transformer/body/decoder/layer_1/ffn/conv2/kernel/Assign\0328transformer/body/decoder/layer_1/ffn/conv2/kernel/read:02Ntransformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/decoder/layer_1/ffn/conv2/bias:0\0226transformer/body/decoder/layer_1/ffn/conv2/bias/Assign\0326transformer/body/decoder/layer_1/ffn/conv2/bias/read:02Ctransformer/body/decoder/layer_1/ffn/conv2/bias/Initializer/zeros:0"
        value: "\nKtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022Ptransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032Ptransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/read:02\\transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nJtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022Otransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032Otransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/read:02\\transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\rglobal_step:0\022\022global_step/Assign\032\022global_step/read:02\037global_step/Initializer/zeros:0"
        value: "\n!losses_avg/problem_0/total_loss:0\022&losses_avg/problem_0/total_loss/Assign\032&losses_avg/problem_0/total_loss/read:02/losses_avg/problem_0/total_loss/initial_value:0"
        value: "\n!losses_avg/problem_0/extra_loss:0\022&losses_avg/problem_0/extra_loss/Assign\032&losses_avg/problem_0/extra_loss/read:02/losses_avg/problem_0/extra_loss/initial_value:0"
        value: "\n$losses_avg/problem_0/training_loss:0\022)losses_avg/problem_0/training_loss/Assign\032)losses_avg/problem_0/training_loss/read:022losses_avg/problem_0/training_loss/initial_value:0"
        value: "\n\035train_stats/problem_0_steps:0\022\"train_stats/problem_0_steps/Assign\032\"train_stats/problem_0_steps/read:02+train_stats/problem_0_steps/initial_value:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_0:0\022<transformer/symbol_modality_2857_256/shared/weights_0/Assign\032<transformer/symbol_modality_2857_256/shared/weights_0/read:02Qtransformer/symbol_modality_2857_256/shared/weights_0/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_1:0\022<transformer/symbol_modality_2857_256/shared/weights_1/Assign\032<transformer/symbol_modality_2857_256/shared/weights_1/read:02Qtransformer/symbol_modality_2857_256/shared/weights_1/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_2:0\022<transformer/symbol_modality_2857_256/shared/weights_2/Assign\032<transformer/symbol_modality_2857_256/shared/weights_2/read:02Qtransformer/symbol_modality_2857_256/shared/weights_2/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_3:0\022<transformer/symbol_modality_2857_256/shared/weights_3/Assign\032<transformer/symbol_modality_2857_256/shared/weights_3/read:02Qtransformer/symbol_modality_2857_256/shared/weights_3/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_4:0\022<transformer/symbol_modality_2857_256/shared/weights_4/Assign\032<transformer/symbol_modality_2857_256/shared/weights_4/read:02Qtransformer/symbol_modality_2857_256/shared/weights_4/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_5:0\022<transformer/symbol_modality_2857_256/shared/weights_5/Assign\032<transformer/symbol_modality_2857_256/shared/weights_5/read:02Qtransformer/symbol_modality_2857_256/shared/weights_5/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_6:0\022<transformer/symbol_modality_2857_256/shared/weights_6/Assign\032<transformer/symbol_modality_2857_256/shared/weights_6/read:02Qtransformer/symbol_modality_2857_256/shared/weights_6/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_7:0\022<transformer/symbol_modality_2857_256/shared/weights_7/Assign\032<transformer/symbol_modality_2857_256/shared/weights_7/read:02Qtransformer/symbol_modality_2857_256/shared/weights_7/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_8:0\022<transformer/symbol_modality_2857_256/shared/weights_8/Assign\032<transformer/symbol_modality_2857_256/shared/weights_8/read:02Qtransformer/symbol_modality_2857_256/shared/weights_8/Initializer/random_normal:0"
        value: "\n7transformer/symbol_modality_2857_256/shared/weights_9:0\022<transformer/symbol_modality_2857_256/shared/weights_9/Assign\032<transformer/symbol_modality_2857_256/shared/weights_9/read:02Qtransformer/symbol_modality_2857_256/shared/weights_9/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_10:0\022=transformer/symbol_modality_2857_256/shared/weights_10/Assign\032=transformer/symbol_modality_2857_256/shared/weights_10/read:02Rtransformer/symbol_modality_2857_256/shared/weights_10/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_11:0\022=transformer/symbol_modality_2857_256/shared/weights_11/Assign\032=transformer/symbol_modality_2857_256/shared/weights_11/read:02Rtransformer/symbol_modality_2857_256/shared/weights_11/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_12:0\022=transformer/symbol_modality_2857_256/shared/weights_12/Assign\032=transformer/symbol_modality_2857_256/shared/weights_12/read:02Rtransformer/symbol_modality_2857_256/shared/weights_12/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_13:0\022=transformer/symbol_modality_2857_256/shared/weights_13/Assign\032=transformer/symbol_modality_2857_256/shared/weights_13/read:02Rtransformer/symbol_modality_2857_256/shared/weights_13/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_14:0\022=transformer/symbol_modality_2857_256/shared/weights_14/Assign\032=transformer/symbol_modality_2857_256/shared/weights_14/read:02Rtransformer/symbol_modality_2857_256/shared/weights_14/Initializer/random_normal:0"
        value: "\n8transformer/symbol_modality_2857_256/shared/weights_15:0\022=transformer/symbol_modality_2857_256/shared/weights_15/Assign\032=transformer/symbol_modality_2857_256/shared/weights_15/read:02Rtransformer/symbol_modality_2857_256/shared/weights_15/Initializer/random_normal:0"
        value: "\n0transformer/body/target_space_embedding/kernel:0\0225transformer/body/target_space_embedding/kernel/Assign\0325transformer/body/target_space_embedding/kernel/read:02Ktransformer/body/target_space_embedding/kernel/Initializer/random_uniform:0"
        value: "\nbtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\natransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n]transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\nWtransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nVtransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\n3transformer/body/encoder/layer_0/ffn/conv1/kernel:0\0228transformer/body/encoder/layer_0/ffn/conv1/kernel/Assign\0328transformer/body/encoder/layer_0/ffn/conv1/kernel/read:02Ntransformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/encoder/layer_0/ffn/conv1/bias:0\0226transformer/body/encoder/layer_0/ffn/conv1/bias/Assign\0326transformer/body/encoder/layer_0/ffn/conv1/bias/read:02Ctransformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros:0"
        value: "\n3transformer/body/encoder/layer_0/ffn/conv2/kernel:0\0228transformer/body/encoder/layer_0/ffn/conv2/kernel/Assign\0328transformer/body/encoder/layer_0/ffn/conv2/kernel/read:02Ntransformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/encoder/layer_0/ffn/conv2/bias:0\0226transformer/body/encoder/layer_0/ffn/conv2/bias/Assign\0326transformer/body/encoder/layer_0/ffn/conv2/bias/read:02Ctransformer/body/encoder/layer_0/ffn/conv2/bias/Initializer/zeros:0"
        value: "\nbtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\natransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n]transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\nWtransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nVtransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\n3transformer/body/encoder/layer_1/ffn/conv1/kernel:0\0228transformer/body/encoder/layer_1/ffn/conv1/kernel/Assign\0328transformer/body/encoder/layer_1/ffn/conv1/kernel/read:02Ntransformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/encoder/layer_1/ffn/conv1/bias:0\0226transformer/body/encoder/layer_1/ffn/conv1/bias/Assign\0326transformer/body/encoder/layer_1/ffn/conv1/bias/read:02Ctransformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros:0"
        value: "\n3transformer/body/encoder/layer_1/ffn/conv2/kernel:0\0228transformer/body/encoder/layer_1/ffn/conv2/kernel/Assign\0328transformer/body/encoder/layer_1/ffn/conv2/kernel/read:02Ntransformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/encoder/layer_1/ffn/conv2/bias:0\0226transformer/body/encoder/layer_1/ffn/conv2/bias/Assign\0326transformer/body/encoder/layer_1/ffn/conv2/bias/read:02Ctransformer/body/encoder/layer_1/ffn/conv2/bias/Initializer/zeros:0"
        value: "\nKtransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022Ptransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032Ptransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/read:02\\transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nJtransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022Otransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032Otransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/read:02\\transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nbtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\natransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n]transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\ndtransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022itransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032itransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02utransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nctransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022htransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032htransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02utransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n_transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel:0\022dtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Assign\032dtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/read:02ztransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\nWtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nVtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\n3transformer/body/decoder/layer_0/ffn/conv1/kernel:0\0228transformer/body/decoder/layer_0/ffn/conv1/kernel/Assign\0328transformer/body/decoder/layer_0/ffn/conv1/kernel/read:02Ntransformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/decoder/layer_0/ffn/conv1/bias:0\0226transformer/body/decoder/layer_0/ffn/conv1/bias/Assign\0326transformer/body/decoder/layer_0/ffn/conv1/bias/read:02Ctransformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros:0"
        value: "\n3transformer/body/decoder/layer_0/ffn/conv2/kernel:0\0228transformer/body/decoder/layer_0/ffn/conv2/kernel/Assign\0328transformer/body/decoder/layer_0/ffn/conv2/kernel/read:02Ntransformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/decoder/layer_0/ffn/conv2/bias:0\0226transformer/body/decoder/layer_0/ffn/conv2/bias/Assign\0326transformer/body/decoder/layer_0/ffn/conv2/bias/read:02Ctransformer/body/decoder/layer_0/ffn/conv2/bias/Initializer/zeros:0"
        value: "\nbtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\natransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n]transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\ndtransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022itransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032itransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02utransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nctransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022htransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032htransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02utransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform:0"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform:0"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform:0"
        value: "\n_transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel:0\022dtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Assign\032dtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/read:02ztransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:0"
        value: "\nWtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nVtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
        value: "\n3transformer/body/decoder/layer_1/ffn/conv1/kernel:0\0228transformer/body/decoder/layer_1/ffn/conv1/kernel/Assign\0328transformer/body/decoder/layer_1/ffn/conv1/kernel/read:02Ntransformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/decoder/layer_1/ffn/conv1/bias:0\0226transformer/body/decoder/layer_1/ffn/conv1/bias/Assign\0326transformer/body/decoder/layer_1/ffn/conv1/bias/read:02Ctransformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros:0"
        value: "\n3transformer/body/decoder/layer_1/ffn/conv2/kernel:0\0228transformer/body/decoder/layer_1/ffn/conv2/kernel/Assign\0328transformer/body/decoder/layer_1/ffn/conv2/kernel/read:02Ntransformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform:0"
        value: "\n1transformer/body/decoder/layer_1/ffn/conv2/bias:0\0226transformer/body/decoder/layer_1/ffn/conv2/bias/Assign\0326transformer/body/decoder/layer_1/ffn/conv2/bias/read:02Ctransformer/body/decoder/layer_1/ffn/conv2/bias/Initializer/zeros:0"
        value: "\nKtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022Ptransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032Ptransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/read:02\\transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:0"
        value: "\nJtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022Otransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032Otransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/read:02\\transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:0"
      }
    }
  }
  collection_def {
    key: "while_context"
    value {
      bytes_list {
        value: "\n\037transformer/while/while_context\020\001*\034transformer/while/LoopCond:02\031transformer/while/Merge:0:\034transformer/while/Identity:0B\030transformer/while/Exit:0B\032transformer/while/Exit_1:0B\032transformer/while/Exit_2:0B\032transformer/while/Exit_3:0B\032transformer/while/Exit_4:0B\032transformer/while/Exit_5:0B\032transformer/while/Exit_6:0B\032transformer/while/Exit_7:0B\032transformer/while/Exit_8:0B\032transformer/while/Exit_9:0B\033transformer/while/Exit_10:0B\033transformer/while/Exit_11:0J\230\270\013\n\016Identity_100:0\n\016Identity_101:0\n\016Identity_102:0\n\016Identity_103:0\n\016Identity_104:0\n\016Identity_105:0\n\016Identity_106:0\n\016Identity_107:0\n\016Identity_108:0\n\016Identity_109:0\n\016Identity_110:0\n\016Identity_111:0\n\016Identity_112:0\n\026Identity_43/RefEnter:0\n\rIdentity_43:0\n\026Identity_44/RefEnter:0\n\rIdentity_44:0\n\026Identity_45/RefEnter:0\n\rIdentity_45:0\n\026Identity_46/RefEnter:0\n\rIdentity_46:0\n\026Identity_47/RefEnter:0\n\rIdentity_47:0\n\026Identity_48/RefEnter:0\n\rIdentity_48:0\n\026Identity_49/RefEnter:0\n\rIdentity_49:0\n\026Identity_50/RefEnter:0\n\rIdentity_50:0\n\026Identity_51/RefEnter:0\n\rIdentity_51:0\n\026Identity_52/RefEnter:0\n\rIdentity_52:0\n\026Identity_53/RefEnter:0\n\rIdentity_53:0\n\026Identity_54/RefEnter:0\n\rIdentity_54:0\n\026Identity_55/RefEnter:0\n\rIdentity_55:0\n\026Identity_56/RefEnter:0\n\rIdentity_56:0\n\026Identity_57/RefEnter:0\n\rIdentity_57:0\n\026Identity_58/RefEnter:0\n\rIdentity_58:0\n\026Identity_59/RefEnter:0\n\rIdentity_59:0\n\026Identity_60/RefEnter:0\n\rIdentity_60:0\n\026Identity_61/RefEnter:0\n\rIdentity_61:0\n\026Identity_62/RefEnter:0\n\rIdentity_62:0\n\026Identity_63/RefEnter:0\n\rIdentity_63:0\n\026Identity_64/RefEnter:0\n\rIdentity_64:0\n\026Identity_65/RefEnter:0\n\rIdentity_65:0\n\026Identity_66/RefEnter:0\n\rIdentity_66:0\n\026Identity_67/RefEnter:0\n\rIdentity_67:0\n\026Identity_68/RefEnter:0\n\rIdentity_68:0\n\026Identity_69/RefEnter:0\n\rIdentity_69:0\n\026Identity_70/RefEnter:0\n\rIdentity_70:0\n\026Identity_71/RefEnter:0\n\rIdentity_71:0\n\026Identity_72/RefEnter:0\n\rIdentity_72:0\n\026Identity_73/RefEnter:0\n\rIdentity_73:0\n\026Identity_74/RefEnter:0\n\rIdentity_74:0\n\026Identity_75/RefEnter:0\n\rIdentity_75:0\n\026Identity_76/RefEnter:0\n\rIdentity_76:0\n\026Identity_77/RefEnter:0\n\rIdentity_77:0\n\026Identity_78/RefEnter:0\n\rIdentity_78:0\n\026Identity_79/RefEnter:0\n\rIdentity_79:0\n\026Identity_80/RefEnter:0\n\rIdentity_80:0\n\026Identity_81/RefEnter:0\n\rIdentity_81:0\n\026Identity_82/RefEnter:0\n\rIdentity_82:0\n\026Identity_83/RefEnter:0\n\rIdentity_83:0\n\026Identity_84/RefEnter:0\n\rIdentity_84:0\n\026Identity_85/RefEnter:0\n\rIdentity_85:0\n\026Identity_86/RefEnter:0\n\rIdentity_86:0\n\026Identity_87/RefEnter:0\n\rIdentity_87:0\n\026Identity_88/RefEnter:0\n\rIdentity_88:0\n\026Identity_89/RefEnter:0\n\rIdentity_89:0\n\026Identity_90/RefEnter:0\n\rIdentity_90:0\n\026Identity_91/RefEnter:0\n\rIdentity_91:0\n\026Identity_92/RefEnter:0\n\rIdentity_92:0\n\026Identity_93/RefEnter:0\n\rIdentity_93:0\n\026Identity_94/RefEnter:0\n\rIdentity_94:0\n\026Identity_95/RefEnter:0\n\rIdentity_95:0\n\026Identity_96/RefEnter:0\n\rIdentity_96:0\n\rIdentity_97:0\n\rIdentity_98:0\n\rIdentity_99:0\n\021transformer/add:0\nDtransformer/attention_bias_lower_triangle/attention_bias_local/mul:0\nctransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\ndtransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel:0\n_transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel:0\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel:0\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel:0\n1transformer/body/decoder/layer_0/ffn/conv1/bias:0\n3transformer/body/decoder/layer_0/ffn/conv1/kernel:0\n1transformer/body/decoder/layer_0/ffn/conv2/bias:0\n3transformer/body/decoder/layer_0/ffn/conv2/kernel:0\nVtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\nWtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\natransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\nbtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel:0\n]transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel:0\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel:0\nctransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\ndtransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel:0\n_transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel:0\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel:0\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel:0\n1transformer/body/decoder/layer_1/ffn/conv1/bias:0\n3transformer/body/decoder/layer_1/ffn/conv1/kernel:0\n1transformer/body/decoder/layer_1/ffn/conv2/bias:0\n3transformer/body/decoder/layer_1/ffn/conv2/kernel:0\nVtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\nWtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\natransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\nbtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel:0\n]transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel:0\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel:0\nJtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\nKtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\n*transformer/get_timing_signal_1d/Reshape:0\n\035transformer/strided_slice_8:0\n7transformer/symbol_modality_2857_256/shared/weights_0:0\n8transformer/symbol_modality_2857_256/shared/weights_10:0\n8transformer/symbol_modality_2857_256/shared/weights_11:0\n8transformer/symbol_modality_2857_256/shared/weights_12:0\n8transformer/symbol_modality_2857_256/shared/weights_13:0\n8transformer/symbol_modality_2857_256/shared/weights_14:0\n8transformer/symbol_modality_2857_256/shared/weights_15:0\n7transformer/symbol_modality_2857_256/shared/weights_1:0\n7transformer/symbol_modality_2857_256/shared/weights_2:0\n7transformer/symbol_modality_2857_256/shared/weights_3:0\n7transformer/symbol_modality_2857_256/shared/weights_4:0\n7transformer/symbol_modality_2857_256/shared/weights_5:0\n7transformer/symbol_modality_2857_256/shared/weights_6:0\n7transformer/symbol_modality_2857_256/shared/weights_7:0\n7transformer/symbol_modality_2857_256/shared/weights_8:0\n7transformer/symbol_modality_2857_256/shared/weights_9:0\n\027transformer/while/All:0\n)transformer/while/Any/reduction_indices:0\n\027transformer/while/Any:0\n\031transformer/while/Const:0\n\033transformer/while/Const_1:0\n\031transformer/while/Enter:0\n\034transformer/while/Enter_10:0\n\034transformer/while/Enter_11:0\n\033transformer/while/Enter_1:0\n\033transformer/while/Enter_2:0\n\033transformer/while/Enter_3:0\n\033transformer/while/Enter_4:0\n\033transformer/while/Enter_5:0\n\033transformer/while/Enter_6:0\n\033transformer/while/Enter_7:0\n\033transformer/while/Enter_8:0\n\033transformer/while/Enter_9:0\n\033transformer/while/Equal/y:0\n\031transformer/while/Equal:0\n\035transformer/while/Equal_1/y:0\n\033transformer/while/Equal_1:0\n\030transformer/while/Exit:0\n\033transformer/while/Exit_10:0\n\033transformer/while/Exit_11:0\n\032transformer/while/Exit_1:0\n\032transformer/while/Exit_2:0\n\032transformer/while/Exit_3:0\n\032transformer/while/Exit_4:0\n\032transformer/while/Exit_5:0\n\032transformer/while/Exit_6:0\n\032transformer/while/Exit_7:0\n\032transformer/while/Exit_8:0\n\032transformer/while/Exit_9:0\n\"transformer/while/ExpandDims/dim:0\n\036transformer/while/ExpandDims:0\n$transformer/while/ExpandDims_1/dim:0\n transformer/while/ExpandDims_1:0\n$transformer/while/ExpandDims_2/dim:0\n transformer/while/ExpandDims_2:0\n$transformer/while/ExpandDims_3/dim:0\n transformer/while/ExpandDims_3:0\n\034transformer/while/GatherNd:0\n\036transformer/while/GatherNd_1:0\n\036transformer/while/GatherNd_2:0\n\036transformer/while/GatherNd_3:0\n\036transformer/while/GatherNd_4:0\n\036transformer/while/GatherNd_5:0\n\036transformer/while/GatherNd_6:0\n\033transformer/while/Greater:0\n\034transformer/while/Identity:0\n\037transformer/while/Identity_10:0\n\037transformer/while/Identity_11:0\n\036transformer/while/Identity_1:0\n\036transformer/while/Identity_2:0\n\036transformer/while/Identity_3:0\n\036transformer/while/Identity_4:0\n\036transformer/while/Identity_5:0\n\036transformer/while/Identity_6:0\n\036transformer/while/Identity_7:0\n\036transformer/while/Identity_8:0\n\036transformer/while/Identity_9:0\n\030transformer/while/Less:0\n\036transformer/while/LogicalAnd:0\n\036transformer/while/LogicalNot:0\n\034transformer/while/LoopCond:0\n\031transformer/while/Merge:0\n\031transformer/while/Merge:1\n\034transformer/while/Merge_10:0\n\034transformer/while/Merge_10:1\n\034transformer/while/Merge_11:0\n\034transformer/while/Merge_11:1\n\033transformer/while/Merge_1:0\n\033transformer/while/Merge_1:1\n\033transformer/while/Merge_2:0\n\033transformer/while/Merge_2:1\n\033transformer/while/Merge_3:0\n\033transformer/while/Merge_3:1\n\033transformer/while/Merge_4:0\n\033transformer/while/Merge_4:1\n\033transformer/while/Merge_5:0\n\033transformer/while/Merge_5:1\n\033transformer/while/Merge_6:0\n\033transformer/while/Merge_6:1\n\033transformer/while/Merge_7:0\n\033transformer/while/Merge_7:1\n\033transformer/while/Merge_8:0\n\033transformer/while/Merge_8:1\n\033transformer/while/Merge_9:0\n\033transformer/while/Merge_9:1\n)transformer/while/Min/reduction_indices:0\n\027transformer/while/Min:0\n!transformer/while/NextIteration:0\n$transformer/while/NextIteration_10:0\n$transformer/while/NextIteration_11:0\n#transformer/while/NextIteration_1:0\n#transformer/while/NextIteration_2:0\n#transformer/while/NextIteration_3:0\n#transformer/while/NextIteration_4:0\n#transformer/while/NextIteration_5:0\n#transformer/while/NextIteration_6:0\n#transformer/while/NextIteration_7:0\n#transformer/while/NextIteration_8:0\n#transformer/while/NextIteration_9:0\n\031transformer/while/Pow/y:0\n\027transformer/while/Pow:0\n\033transformer/while/Pow_1/y:0\n\031transformer/while/Pow_1:0\n\'transformer/while/ReduceLogSumExp/Exp:0\n,transformer/while/ReduceLogSumExp/IsFinite:0\n\'transformer/while/ReduceLogSumExp/Log:0\n9transformer/while/ReduceLogSumExp/Max/reduction_indices:0\n\'transformer/while/ReduceLogSumExp/Max:0\n*transformer/while/ReduceLogSumExp/Select:0\n0transformer/while/ReduceLogSumExp/StopGradient:0\n9transformer/while/ReduceLogSumExp/Sum/reduction_indices:0\n\'transformer/while/ReduceLogSumExp/Sum:0\n\'transformer/while/ReduceLogSumExp/add:0\n\'transformer/while/ReduceLogSumExp/sub:0\n.transformer/while/ReduceLogSumExp/zeros_like:0\n#transformer/while/Reshape/shape/1:0\n!transformer/while/Reshape/shape:0\n\033transformer/while/Reshape:0\n#transformer/while/Reshape_1/shape:0\n&transformer/while/Reshape_10/shape/1:0\n&transformer/while/Reshape_10/shape/3:0\n$transformer/while/Reshape_10/shape:0\n\036transformer/while/Reshape_10:0\n&transformer/while/Reshape_11/shape/1:0\n&transformer/while/Reshape_11/shape/3:0\n$transformer/while/Reshape_11/shape:0\n\036transformer/while/Reshape_11:0\n&transformer/while/Reshape_12/shape/1:0\n&transformer/while/Reshape_12/shape/3:0\n$transformer/while/Reshape_12/shape:0\n\036transformer/while/Reshape_12:0\n&transformer/while/Reshape_13/shape/1:0\n&transformer/while/Reshape_13/shape/3:0\n$transformer/while/Reshape_13/shape:0\n\036transformer/while/Reshape_13:0\n&transformer/while/Reshape_14/shape/1:0\n&transformer/while/Reshape_14/shape/2:0\n$transformer/while/Reshape_14/shape:0\n\036transformer/while/Reshape_14:0\n$transformer/while/Reshape_15/shape:0\n\036transformer/while/Reshape_15:0\n&transformer/while/Reshape_16/shape/1:0\n$transformer/while/Reshape_16/shape:0\n\036transformer/while/Reshape_16:0\n&transformer/while/Reshape_17/shape/1:0\n$transformer/while/Reshape_17/shape:0\n\036transformer/while/Reshape_17:0\n&transformer/while/Reshape_18/shape/1:0\n$transformer/while/Reshape_18/shape:0\n\036transformer/while/Reshape_18:0\n\035transformer/while/Reshape_1:0\n%transformer/while/Reshape_2/shape/2:0\n#transformer/while/Reshape_2/shape:0\n\035transformer/while/Reshape_2:0\n%transformer/while/Reshape_3/shape/2:0\n#transformer/while/Reshape_3/shape:0\n\035transformer/while/Reshape_3:0\n%transformer/while/Reshape_4/shape/2:0\n#transformer/while/Reshape_4/shape:0\n\035transformer/while/Reshape_4:0\n%transformer/while/Reshape_5/shape/2:0\n#transformer/while/Reshape_5/shape:0\n\035transformer/while/Reshape_5:0\n%transformer/while/Reshape_6/shape/2:0\n#transformer/while/Reshape_6/shape:0\n\035transformer/while/Reshape_6:0\n%transformer/while/Reshape_7/shape/2:0\n#transformer/while/Reshape_7/shape:0\n\035transformer/while/Reshape_7:0\n%transformer/while/Reshape_8/shape/1:0\n#transformer/while/Reshape_8/shape:0\n\035transformer/while/Reshape_8:0\n%transformer/while/Reshape_9/shape/1:0\n%transformer/while/Reshape_9/shape/3:0\n#transformer/while/Reshape_9/shape:0\n\035transformer/while/Reshape_9:0\n\031transformer/while/Shape:0\n\034transformer/while/Shape_10:0\n\034transformer/while/Shape_11:0\n\034transformer/while/Shape_12:0\n\034transformer/while/Shape_13:0\n\033transformer/while/Shape_1:0\n\033transformer/while/Shape_2:0\n\033transformer/while/Shape_3:0\n\033transformer/while/Shape_4:0\n\033transformer/while/Shape_5:0\n\033transformer/while/Shape_6:0\n\033transformer/while/Shape_7:0\n\033transformer/while/Shape_8:0\n\033transformer/while/Shape_9:0\n\033transformer/while/Squeeze:0\n\032transformer/while/Switch:0\n\032transformer/while/Switch:1\n\035transformer/while/Switch_10:0\n\035transformer/while/Switch_10:1\n\035transformer/while/Switch_11:0\n\035transformer/while/Switch_11:1\n\034transformer/while/Switch_1:0\n\034transformer/while/Switch_1:1\n\034transformer/while/Switch_2:0\n\034transformer/while/Switch_2:1\n\034transformer/while/Switch_3:0\n\034transformer/while/Switch_3:1\n\034transformer/while/Switch_4:0\n\034transformer/while/Switch_4:1\n\034transformer/while/Switch_5:0\n\034transformer/while/Switch_5:1\n\034transformer/while/Switch_6:0\n\034transformer/while/Switch_6:1\n\034transformer/while/Switch_7:0\n\034transformer/while/Switch_7:1\n\034transformer/while/Switch_8:0\n\034transformer/while/Switch_8:1\n\034transformer/while/Switch_9:0\n\034transformer/while/Switch_9:1\n!transformer/while/ToFloat/Enter:0\n\033transformer/while/ToFloat:0\n\035transformer/while/ToFloat_1:0\n\035transformer/while/ToFloat_2:0\n\035transformer/while/ToFloat_3:0\n\035transformer/while/ToFloat_4:0\n\035transformer/while/ToFloat_5:0\n\034transformer/while/TopKV2/k:0\n\032transformer/while/TopKV2:0\n\032transformer/while/TopKV2:1\n\036transformer/while/TopKV2_1/k:0\n\034transformer/while/TopKV2_1:0\n\034transformer/while/TopKV2_1:1\n\036transformer/while/TopKV2_2/k:0\n\034transformer/while/TopKV2_2:0\n\034transformer/while/TopKV2_2:1\n\031transformer/while/add/x:0\n\027transformer/while/add:0\n\032transformer/while/add_10:0\n\034transformer/while/add_11/y:0\n\032transformer/while/add_11:0\n\031transformer/while/add_1:0\n\033transformer/while/add_2/y:0\n\031transformer/while/add_2:0\n\031transformer/while/add_3:0\n\033transformer/while/add_4/y:0\n\031transformer/while/add_4:0\n\033transformer/while/add_5/y:0\n\031transformer/while/add_5:0\n\031transformer/while/add_6:0\n\033transformer/while/add_7/y:0\n\031transformer/while/add_7:0\n\033transformer/while/add_8/x:0\n\031transformer/while/add_8:0\n\031transformer/while/add_9:0\n7transformer/while/body/parallel_0/body/ExpandDims/dim:0\n3transformer/while/body/parallel_0/body/ExpandDims:0\n_transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/dropout/keep_prob:0\ndtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/Shape:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Cast/x:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Square:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub_1:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_1:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_2:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1:0\n\227\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape:0\n\217\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape:0\n\215\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack:0\n\237\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1:0\n\237\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2:0\n\227\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Rank:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Shape:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Shape_1:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice/begin:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice/size:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Slice:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Softmax:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Sub/y:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/Sub:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/add:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/attention_weights:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat/axis:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat/values_0:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/concat:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/dropout/keep_prob:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Cast:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Cast_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_2:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Gather_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual/y:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Less/y:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Less:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/ListDiff:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/ListDiff:1\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/MatMul:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Rank:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Shape:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/add:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/add_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_2/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_2:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/mul_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range/delta:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range/start:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/range:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/stack:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot:0\nctransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul/y:0\natransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Cast:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Cast_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Gather_1:0\n\207\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Less/y:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Less:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff:1\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Rank:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Shape:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/add:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/add_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/mul:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/mul_1:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range/delta:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range/start:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/range:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/stack:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose:0\n\211\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Cast:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Cast_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_2:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Gather_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual/y:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Less/y:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Less:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/ListDiff:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/ListDiff:1\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/MatMul:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Rank:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Shape:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/add:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/add_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_2/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_2:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/mul_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range/delta:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range/start:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/range:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/stack:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack:0\n\230\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1:0\n\230\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Shape:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack:0\n\230\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1:0\n\230\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/transpose/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_2/transpose:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Cast:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Cast_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_2:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Gather_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual/y:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Less/y:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Less:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/ListDiff:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/ListDiff:1\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/MatMul:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Rank:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Shape:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/add:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/add_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_2/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_2:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/mul_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range/delta:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range/start:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/range:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/stack:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot:0\nJtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/BiasAdd:0\nGtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Relu:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Cast:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Cast_1:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Const_2:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Gather_1:0\n[transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/GreaterEqual/y:0\nYtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/GreaterEqual:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Less/y:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Less:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/ListDiff:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/ListDiff:1\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/MatMul:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Prod:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Prod_1:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Rank:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape:0\n\\transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape_1/shape:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Reshape_1:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/Shape:0\nPtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/add:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/add_1:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/axes:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat/axis:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat:0\nZtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_1/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_1:0\nZtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_2/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/concat_2:0\nPtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/mul:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/mul_1:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range/delta:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range/start:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/range:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/stack:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose:0\n]transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose_1/perm:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot/transpose_1:0\nLtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv1/Tensordot:0\nJtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/BiasAdd:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Cast:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Cast_1:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Const_2:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Gather_1:0\n[transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/GreaterEqual/y:0\nYtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/GreaterEqual:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Less/y:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Less:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/ListDiff:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/ListDiff:1\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/MatMul:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Prod:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Prod_1:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Rank:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape:0\n\\transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape_1/shape:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Reshape_1:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/Shape:0\nPtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/add:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/add_1:0\nQtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/axes:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat/axis:0\nStransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat:0\nZtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_1/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_1:0\nZtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_2/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/concat_2:0\nPtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/mul:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/mul_1:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range/delta:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range/start:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/range:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/stack:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose:0\n]transformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose_1/perm:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot/transpose_1:0\nLtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/conv2/Tensordot:0\nRtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/add:0\n`transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_postprocess/dropout/keep_prob:0\nWtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/Shape:0\nctransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Cast/x:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\natransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nctransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Rsqrt:0\nctransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/Square:0\n`transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/add:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1:0\n`transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul_1:0\n`transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub_1:0\netransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_2:0\n_transformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack:0\nitransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_2:0\natransformer/while/body/parallel_0/body/decoder/layer_0/ffn/layer_prepostprocess/strided_slice_1:0\n]transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/dropout/keep_prob:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/Shape:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Cast/x:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Square:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub_1:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2:0\njtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2:0\n\223\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape:0\n\215\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape:0\n\213\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape:0\n\231\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2:0\n\223\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat/axis:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat:0\nitransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1/axis:0\ndtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Rank:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/begin:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice/size:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Slice:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Softmax:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub/y:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/Sub:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/add:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat/values_0:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/concat:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/dropout/keep_prob:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Cast_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Gather_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GreaterEqual:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less/y:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Less:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/ListDiff:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/ListDiff:1\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Rank:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/add_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_2:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/mul_1:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/delta:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range/start:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/range:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot:0\natransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul/y:0\n_transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Cast_1:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Gather_1:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less/y:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Less:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/ListDiff:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/ListDiff:1\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Rank:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/add_1:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_2:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/mul_1:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/delta:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range/start:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/range:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose:0\n\207\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Cast_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Gather_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GreaterEqual:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less/y:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Less:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/ListDiff:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/ListDiff:1\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Rank:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/add_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_2:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/mul_1:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/delta:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range/start:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/range:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3:0\n\212\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2:0\n\212\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Cast_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Gather_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GreaterEqual:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less/y:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Less:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/ListDiff:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/ListDiff:1\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Rank:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/add_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_2:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/mul_1:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/delta:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range/start:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/range:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot:0\n_transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/dropout/keep_prob:0\ndtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/Shape:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Cast/x:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Square:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub_1:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_1:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_2:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1:0\n\227\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape:0\n\217\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape:0\n\215\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack:0\n\237\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1:0\n\237\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2:0\n\227\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Rank:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Shape:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Shape_1:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice/begin:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice/size:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Slice:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Softmax:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Sub/y:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/Sub:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/add:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/attention_weights:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat/axis:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat/values_0:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/concat:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/dropout/keep_prob:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Cast:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Cast_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_2:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Gather_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual/y:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GreaterEqual:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Less/y:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Less:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/ListDiff:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/ListDiff:1\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/MatMul:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Rank:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Shape:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/add:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/add_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_2/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_2:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/mul_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range/delta:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range/start:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/range:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/stack:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot:0\nctransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul/y:0\natransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Cast:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Cast_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Gather_1:0\n\207\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GreaterEqual:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Less/y:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Less:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/ListDiff:1\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Rank:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Shape:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/add:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/add_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_2:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/mul:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/mul_1:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range/delta:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range/start:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/range:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/stack:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose:0\n\211\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Cast:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Cast_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_2:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Gather_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual/y:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GreaterEqual:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Less/y:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Less:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/ListDiff:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/ListDiff:1\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/MatMul:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Rank:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Shape:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/add:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/add_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_2/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_2:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/mul_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range/delta:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range/start:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/range:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/stack:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack:0\n\230\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1:0\n\230\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/Shape:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack:0\n\230\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1:0\n\230\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/transpose/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_2/transpose:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Cast:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Cast_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_2:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Gather_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual/y:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GreaterEqual:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Less/y:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Less:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/ListDiff:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/ListDiff:1\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/MatMul:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Rank:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Shape:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/add:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/add_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_2/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_2:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/mul_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range/delta:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range/start:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/range:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/stack:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot:0\nJtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/BiasAdd:0\nGtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Relu:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Cast:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Cast_1:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Const_2:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Gather_1:0\n[transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/GreaterEqual/y:0\nYtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/GreaterEqual:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Less/y:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Less:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/ListDiff:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/ListDiff:1\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/MatMul:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Prod:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Prod_1:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Rank:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape:0\n\\transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape_1/shape:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Reshape_1:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/Shape:0\nPtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/add:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/add_1:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/axes:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat/axis:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat:0\nZtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_1/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_1:0\nZtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_2/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/concat_2:0\nPtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/mul:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/mul_1:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range/delta:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range/start:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/range:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/stack:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose:0\n]transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose_1/perm:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot/transpose_1:0\nLtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv1/Tensordot:0\nJtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/BiasAdd:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Cast:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Cast_1:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Const_2:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Gather_1:0\n[transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/GreaterEqual/y:0\nYtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/GreaterEqual:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Less/y:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Less:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/ListDiff:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/ListDiff:1\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/MatMul:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Prod:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Prod_1:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Rank:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape:0\n\\transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape_1/shape:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Reshape_1:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/Shape:0\nPtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/add:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/add_1:0\nQtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/axes:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat/axis:0\nStransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat:0\nZtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_1/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_1:0\nZtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_2/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/concat_2:0\nPtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/mul:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/mul_1:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range/delta:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range/start:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/range:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/stack:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose:0\n]transformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose_1/perm:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot/transpose_1:0\nLtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/conv2/Tensordot:0\nRtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_postprocess/add:0\n`transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_postprocess/dropout/keep_prob:0\nWtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/Shape:0\nctransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Cast/x:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\natransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nctransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Rsqrt:0\nctransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/Square:0\n`transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/add:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1:0\n`transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul_1:0\n`transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub_1:0\netransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_2:0\n_transformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack:0\nitransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_2:0\natransformer/while/body/parallel_0/body/decoder/layer_1/ffn/layer_prepostprocess/strided_slice_1:0\n]transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/dropout/keep_prob:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/Shape:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Cast/x:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Square:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub_1:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2:0\njtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2:0\n\223\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape:0\n\215\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape:0\n\213\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape:0\n\231\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2:0\n\223\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat/axis:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat:0\nitransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1/axis:0\ndtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Rank:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/begin:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice/size:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Slice:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Softmax:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub/y:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/Sub:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/add:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat/values_0:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/concat:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/dropout/keep_prob:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Cast_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Gather_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual/y:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GreaterEqual:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less/y:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Less:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/ListDiff:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/ListDiff:1\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Rank:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/add_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_2:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/mul_1:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/delta:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range/start:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/range:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot:0\natransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul/y:0\n_transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Cast_1:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Gather_1:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual/y:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GreaterEqual:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less/y:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Less:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/ListDiff:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/ListDiff:1\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Rank:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/add_1:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_2:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/mul_1:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/delta:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range/start:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/range:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose:0\n\207\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Cast_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Gather_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual/y:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GreaterEqual:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less/y:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Less:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/ListDiff:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/ListDiff:1\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Rank:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/add_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_2:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/mul_1:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/delta:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range/start:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/range:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3:0\n\212\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2:0\n\212\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Cast_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Gather_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual/y:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GreaterEqual:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less/y:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Less:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/ListDiff:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/ListDiff:1\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Rank:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/add_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_2:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/mul_1:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/delta:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range/start:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/range:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot:0\nKtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/Shape:0\nWtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Cast/x:0\ngtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nUtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean:0\nitransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nWtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Rsqrt:0\nWtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Square:0\nTtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add:0\nVtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul:0\nVtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub:0\nVtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub_1:0\nYtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack:0\n[transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_1:0\n[transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_2:0\nStransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice:0\n[transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack:0\n]transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_1:0\n]transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_2:0\nUtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1:0\n:transformer/while/body/parallel_0/body/dropout/keep_prob:0\n\037transformer/while/concat/axis:0\n\032transformer/while/concat:0\n!transformer/while/concat_1/axis:0\n\034transformer/while/concat_1:0\n!transformer/while/concat_2/axis:0\n\034transformer/while/concat_2:0\n!transformer/while/concat_3/axis:0\n\034transformer/while/concat_3:0\n!transformer/while/concat_4/axis:0\n\034transformer/while/concat_4:0\n\036transformer/while/cond/Merge:0\n\036transformer/while/cond/Merge:1\n\037transformer/while/cond/Switch:0\n\037transformer/while/cond/Switch:1\n!transformer/while/cond/Switch_1:0\n transformer/while/cond/pred_id:0\n!transformer/while/cond/switch_f:0\n!transformer/while/cond/switch_t:0\n#transformer/while/cond/zeros_like:0\n\036transformer/while/floordiv/y:0\n\034transformer/while/floordiv:0\n transformer/while/floordiv_1/y:0\n\036transformer/while/floordiv_1:0\n transformer/while/floordiv_2/y:0\n\036transformer/while/floordiv_2:0\n transformer/while/floordiv_3/y:0\n\036transformer/while/floordiv_3:0\n)transformer/while/grow_alive_topk_flags:0\n*transformer/while/grow_alive_topk_scores:0\n\'transformer/while/grow_alive_topk_seq:0\n*transformer/while/grow_alive_topk_states:0\n,transformer/while/grow_alive_topk_states_1:0\n,transformer/while/grow_alive_topk_states_2:0\n,transformer/while/grow_alive_topk_states_3:0\n,transformer/while/grow_alive_topk_states_4:0\n,transformer/while/grow_alive_topk_states_5:0\n,transformer/while/grow_finished_topk_flags:0\n-transformer/while/grow_finished_topk_scores:0\n*transformer/while/grow_finished_topk_seq:0\n\031transformer/while/mod/y:0\n\027transformer/while/mod:0\n\027transformer/while/mul:0\n\033transformer/while/mul_1/y:0\n\032transformer/while/mul_10:0\n\034transformer/while/mul_11/y:0\n\032transformer/while/mul_11:0\n\034transformer/while/mul_12/y:0\n\032transformer/while/mul_12:0\n\034transformer/while/mul_13/y:0\n\032transformer/while/mul_13:0\n\034transformer/while/mul_14/y:0\n\032transformer/while/mul_14:0\n\034transformer/while/mul_15/y:0\n\032transformer/while/mul_15:0\n\031transformer/while/mul_1:0\n\037transformer/while/mul_2/Enter:0\n\033transformer/while/mul_2/y:0\n\031transformer/while/mul_2:0\n\031transformer/while/mul_3:0\n\031transformer/while/mul_4:0\n\031transformer/while/mul_5:0\n\031transformer/while/mul_6:0\n\031transformer/while/mul_7:0\n\031transformer/while/mul_8:0\n\033transformer/while/mul_9/y:0\n\031transformer/while/mul_9:0\n3transformer/while/parallel_0/transformer/Identity:0\n\037transformer/while/range/delta:0\n\037transformer/while/range/start:0\n\031transformer/while/range:0\n!transformer/while/range_1/delta:0\n!transformer/while/range_1/start:0\n\033transformer/while/range_1:0\n!transformer/while/range_2/delta:0\n!transformer/while/range_2/start:0\n\033transformer/while/range_2:0\n#transformer/while/split/split_dim:0\n\031transformer/while/split:0\n\031transformer/while/stack:0\n\033transformer/while/stack_1:0\n\033transformer/while/stack_2:0\n\'transformer/while/strided_slice/stack:0\n)transformer/while/strided_slice/stack_1:0\n)transformer/while/strided_slice/stack_2:0\n!transformer/while/strided_slice:0\n)transformer/while/strided_slice_1/stack:0\n+transformer/while/strided_slice_1/stack_1:0\n+transformer/while/strided_slice_1/stack_2:0\n*transformer/while/strided_slice_10/stack:0\n,transformer/while/strided_slice_10/stack_1:0\n,transformer/while/strided_slice_10/stack_2:0\n$transformer/while/strided_slice_10:0\n*transformer/while/strided_slice_11/stack:0\n,transformer/while/strided_slice_11/stack_1:0\n,transformer/while/strided_slice_11/stack_2:0\n$transformer/while/strided_slice_11:0\n*transformer/while/strided_slice_12/stack:0\n,transformer/while/strided_slice_12/stack_1:0\n,transformer/while/strided_slice_12/stack_2:0\n$transformer/while/strided_slice_12:0\n*transformer/while/strided_slice_13/stack:0\n,transformer/while/strided_slice_13/stack_1:0\n,transformer/while/strided_slice_13/stack_2:0\n$transformer/while/strided_slice_13:0\n*transformer/while/strided_slice_14/stack:0\n,transformer/while/strided_slice_14/stack_1:0\n,transformer/while/strided_slice_14/stack_2:0\n$transformer/while/strided_slice_14:0\n*transformer/while/strided_slice_15/stack:0\n,transformer/while/strided_slice_15/stack_1:0\n,transformer/while/strided_slice_15/stack_2:0\n$transformer/while/strided_slice_15:0\n*transformer/while/strided_slice_16/stack:0\n,transformer/while/strided_slice_16/stack_1:0\n,transformer/while/strided_slice_16/stack_2:0\n$transformer/while/strided_slice_16:0\n*transformer/while/strided_slice_17/stack:0\n,transformer/while/strided_slice_17/stack_1:0\n,transformer/while/strided_slice_17/stack_2:0\n$transformer/while/strided_slice_17:0\n*transformer/while/strided_slice_18/stack:0\n,transformer/while/strided_slice_18/stack_1:0\n,transformer/while/strided_slice_18/stack_2:0\n$transformer/while/strided_slice_18:0\n*transformer/while/strided_slice_19/stack:0\n,transformer/while/strided_slice_19/stack_1:0\n,transformer/while/strided_slice_19/stack_2:0\n$transformer/while/strided_slice_19:0\n#transformer/while/strided_slice_1:0\n)transformer/while/strided_slice_2/stack:0\n+transformer/while/strided_slice_2/stack_1:0\n+transformer/while/strided_slice_2/stack_2:0\n*transformer/while/strided_slice_20/stack:0\n,transformer/while/strided_slice_20/stack_1:0\n,transformer/while/strided_slice_20/stack_2:0\n$transformer/while/strided_slice_20:0\n*transformer/while/strided_slice_21/stack:0\n,transformer/while/strided_slice_21/stack_1:0\n,transformer/while/strided_slice_21/stack_2:0\n$transformer/while/strided_slice_21:0\n*transformer/while/strided_slice_22/stack:0\n,transformer/while/strided_slice_22/stack_1:0\n,transformer/while/strided_slice_22/stack_2:0\n$transformer/while/strided_slice_22:0\n*transformer/while/strided_slice_23/stack:0\n,transformer/while/strided_slice_23/stack_1:0\n,transformer/while/strided_slice_23/stack_2:0\n$transformer/while/strided_slice_23:0\n*transformer/while/strided_slice_24/stack:0\n,transformer/while/strided_slice_24/stack_1:0\n,transformer/while/strided_slice_24/stack_2:0\n$transformer/while/strided_slice_24:0\n*transformer/while/strided_slice_25/stack:0\n,transformer/while/strided_slice_25/stack_1:0\n,transformer/while/strided_slice_25/stack_2:0\n$transformer/while/strided_slice_25:0\n*transformer/while/strided_slice_26/Enter:0\n,transformer/while/strided_slice_26/stack/0:0\n*transformer/while/strided_slice_26/stack:0\n.transformer/while/strided_slice_26/stack_1/0:0\n,transformer/while/strided_slice_26/stack_1:0\n,transformer/while/strided_slice_26/stack_2:0\n$transformer/while/strided_slice_26:0\n*transformer/while/strided_slice_27/Enter:0\n,transformer/while/strided_slice_27/stack/0:0\n,transformer/while/strided_slice_27/stack/1:0\n,transformer/while/strided_slice_27/stack/3:0\n*transformer/while/strided_slice_27/stack:0\n.transformer/while/strided_slice_27/stack_1/0:0\n.transformer/while/strided_slice_27/stack_1/1:0\n,transformer/while/strided_slice_27/stack_1:0\n,transformer/while/strided_slice_27/stack_2:0\n$transformer/while/strided_slice_27:0\n*transformer/while/strided_slice_28/stack:0\n,transformer/while/strided_slice_28/stack_1:0\n,transformer/while/strided_slice_28/stack_2:0\n$transformer/while/strided_slice_28:0\n*transformer/while/strided_slice_29/stack:0\n,transformer/while/strided_slice_29/stack_1:0\n,transformer/while/strided_slice_29/stack_2:0\n$transformer/while/strided_slice_29:0\n#transformer/while/strided_slice_2:0\n)transformer/while/strided_slice_3/stack:0\n+transformer/while/strided_slice_3/stack_1:0\n+transformer/while/strided_slice_3/stack_2:0\n*transformer/while/strided_slice_30/stack:0\n,transformer/while/strided_slice_30/stack_1:0\n,transformer/while/strided_slice_30/stack_2:0\n$transformer/while/strided_slice_30:0\n*transformer/while/strided_slice_31/stack:0\n,transformer/while/strided_slice_31/stack_1:0\n,transformer/while/strided_slice_31/stack_2:0\n$transformer/while/strided_slice_31:0\n*transformer/while/strided_slice_32/stack:0\n,transformer/while/strided_slice_32/stack_1:0\n,transformer/while/strided_slice_32/stack_2:0\n$transformer/while/strided_slice_32:0\n*transformer/while/strided_slice_33/stack:0\n,transformer/while/strided_slice_33/stack_1:0\n,transformer/while/strided_slice_33/stack_2:0\n$transformer/while/strided_slice_33:0\n*transformer/while/strided_slice_34/stack:0\n,transformer/while/strided_slice_34/stack_1:0\n,transformer/while/strided_slice_34/stack_2:0\n$transformer/while/strided_slice_34:0\n*transformer/while/strided_slice_35/stack:0\n,transformer/while/strided_slice_35/stack_1:0\n,transformer/while/strided_slice_35/stack_2:0\n$transformer/while/strided_slice_35:0\n*transformer/while/strided_slice_36/stack:0\n,transformer/while/strided_slice_36/stack_1:0\n,transformer/while/strided_slice_36/stack_2:0\n$transformer/while/strided_slice_36:0\n*transformer/while/strided_slice_37/stack:0\n,transformer/while/strided_slice_37/stack_1:0\n,transformer/while/strided_slice_37/stack_2:0\n$transformer/while/strided_slice_37:0\n*transformer/while/strided_slice_38/stack:0\n,transformer/while/strided_slice_38/stack_1:0\n,transformer/while/strided_slice_38/stack_2:0\n$transformer/while/strided_slice_38:0\n*transformer/while/strided_slice_39/stack:0\n,transformer/while/strided_slice_39/stack_1:0\n,transformer/while/strided_slice_39/stack_2:0\n$transformer/while/strided_slice_39:0\n#transformer/while/strided_slice_3:0\n)transformer/while/strided_slice_4/stack:0\n+transformer/while/strided_slice_4/stack_1:0\n+transformer/while/strided_slice_4/stack_2:0\n*transformer/while/strided_slice_40/stack:0\n,transformer/while/strided_slice_40/stack_1:0\n,transformer/while/strided_slice_40/stack_2:0\n$transformer/while/strided_slice_40:0\n*transformer/while/strided_slice_41/stack:0\n,transformer/while/strided_slice_41/stack_1:0\n,transformer/while/strided_slice_41/stack_2:0\n$transformer/while/strided_slice_41:0\n#transformer/while/strided_slice_4:0\n)transformer/while/strided_slice_5/stack:0\n+transformer/while/strided_slice_5/stack_1:0\n+transformer/while/strided_slice_5/stack_2:0\n#transformer/while/strided_slice_5:0\n)transformer/while/strided_slice_6/stack:0\n+transformer/while/strided_slice_6/stack_1:0\n+transformer/while/strided_slice_6/stack_2:0\n#transformer/while/strided_slice_6:0\n)transformer/while/strided_slice_7/stack:0\n+transformer/while/strided_slice_7/stack_1:0\n+transformer/while/strided_slice_7/stack_2:0\n#transformer/while/strided_slice_7:0\n)transformer/while/strided_slice_8/stack:0\n+transformer/while/strided_slice_8/stack_1:0\n+transformer/while/strided_slice_8/stack_2:0\n#transformer/while/strided_slice_8:0\n)transformer/while/strided_slice_9/stack:0\n+transformer/while/strided_slice_9/stack_1:0\n+transformer/while/strided_slice_9/stack_2:0\n#transformer/while/strided_slice_9:0\n\031transformer/while/sub/x:0\n\027transformer/while/sub:0\n\031transformer/while/sub_1:0\n\033transformer/while/sub_2/x:0\n\031transformer/while/sub_2:0\nftransformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims/dim:0\nbtransformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ExpandDims:0\n^transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Gather:0\nbtransformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual/y:0\n`transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/NotEqual:0\n_transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/Squeeze:0\n_transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/ToFloat:0\nctransformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat/axis:0\n^transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/concat:0\n{transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/convert_gradient_to_tensor_cc661786:0\n]transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul/y:0\n[transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul:0\n]transformer/while/symbol_modality_2857_256/parallel_0/symbol_modality_2857_256/shared/mul_1:0\n`transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/MatMul:0\ngtransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape/shape:0\natransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape:0\nktransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/2:0\nktransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/3:0\nktransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape/4:0\nitransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1/shape:0\nctransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Reshape_1:0\n_transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/Shape:0\netransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/concat/axis:0\n`transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/concat:0\n}transformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/convert_gradient_to_tensor_cc661786:0\nmtransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack:0\notransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack_1:0\notransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice/stack_2:0\ngtransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice:0\notransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack:0\nqtransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack_1:0\nqtransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1/stack_2:0\nitransformer/while/symbol_modality_2857_256_1/parallel_0/symbol_modality_2857_256/shared/strided_slice_1:0\n\035transformer/while/truediv/y:0\n\033transformer/while/truediv:0\n\035transformer/while/truediv_1:0\n\037transformer/while/truediv_2/y:0\n\035transformer/while/truediv_2:0\n\035transformer/while/truediv_3:0\n\037transformer/while/zeros/Const:0\n!transformer/while/zeros/shape/1:0\n!transformer/while/zeros/shape/2:0\n\037transformer/while/zeros/shape:0\n\031transformer/while/zeros:0\022e\nKtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\026Identity_95/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_6:0\022\026Identity_49/RefEnter:0\022K\n1transformer/body/decoder/layer_0/ffn/conv2/bias:0\022\026Identity_76/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_1:0\022\026Identity_44/RefEnter:0\022y\n_transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel:0\022\026Identity_88/RefEnter:0\022h\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel:0\022\026Identity_62/RefEnter:0\022R\n8transformer/symbol_modality_2857_256/shared/weights_11:0\022\026Identity_54/RefEnter:0\022M\n3transformer/body/decoder/layer_0/ffn/conv1/kernel:0\022\026Identity_73/RefEnter:0\022p\nVtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\026Identity_72/RefEnter:0\022r\nDtransformer/attention_bias_lower_triangle/attention_bias_local/mul:0\022*transformer/while/strided_slice_27/Enter:0\022j\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel:0\022\026Identity_68/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_7:0\022\026Identity_50/RefEnter:0\022K\n1transformer/body/decoder/layer_1/ffn/conv1/bias:0\022\026Identity_92/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_2:0\022\026Identity_45/RefEnter:0\022R\n8transformer/symbol_modality_2857_256/shared/weights_12:0\022\026Identity_55/RefEnter:0\022}\nctransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\026Identity_84/RefEnter:0\022}\nctransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\026Identity_66/RefEnter:0\022|\nbtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\026Identity_59/RefEnter:0\022q\nWtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\026Identity_89/RefEnter:0\022~\ndtransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\026Identity_83/RefEnter:0\022X\n*transformer/get_timing_signal_1d/Reshape:0\022*transformer/while/strided_slice_26/Enter:0\022M\n3transformer/body/decoder/layer_1/ffn/conv2/kernel:0\022\026Identity_93/RefEnter:0\022j\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel:0\022\026Identity_87/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_8:0\022\026Identity_51/RefEnter:0\022j\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel:0\022\026Identity_85/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_3:0\022\026Identity_46/RefEnter:0\022~\ndtransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\026Identity_65/RefEnter:0\022y\n_transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel:0\022\026Identity_70/RefEnter:0\022q\nWtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\026Identity_71/RefEnter:0\022R\n8transformer/symbol_modality_2857_256/shared/weights_13:0\022\026Identity_56/RefEnter:0\022w\n]transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022\026Identity_82/RefEnter:0\022|\nbtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\026Identity_77/RefEnter:0\022h\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel:0\022\026Identity_81/RefEnter:0\022K\n1transformer/body/decoder/layer_1/ffn/conv2/bias:0\022\026Identity_94/RefEnter:0\022@\n\035transformer/strided_slice_8:0\022\037transformer/while/mul_2/Enter:0\022M\n3transformer/body/decoder/layer_1/ffn/conv1/kernel:0\022\026Identity_91/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_9:0\022\026Identity_52/RefEnter:0\022h\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel:0\022\026Identity_79/RefEnter:0\022d\nJtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\026Identity_96/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_4:0\022\026Identity_47/RefEnter:0\022R\n8transformer/symbol_modality_2857_256/shared/weights_14:0\022\026Identity_57/RefEnter:0\022p\nVtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\026Identity_90/RefEnter:0\022K\n1transformer/body/decoder/layer_0/ffn/conv1/bias:0\022\026Identity_74/RefEnter:0\022{\natransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\026Identity_60/RefEnter:0\022j\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel:0\022\026Identity_86/RefEnter:0\0226\n\021transformer/add:0\022!transformer/while/ToFloat/Enter:0\022{\natransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\026Identity_78/RefEnter:0\022h\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel:0\022\026Identity_63/RefEnter:0\022h\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel:0\022\026Identity_61/RefEnter:0\022w\n]transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022\026Identity_64/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_5:0\022\026Identity_48/RefEnter:0\022Q\n7transformer/symbol_modality_2857_256/shared/weights_0:0\022\026Identity_43/RefEnter:0\022j\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel:0\022\026Identity_69/RefEnter:0\022R\n8transformer/symbol_modality_2857_256/shared/weights_15:0\022\026Identity_58/RefEnter:0\022h\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel:0\022\026Identity_80/RefEnter:0\022R\n8transformer/symbol_modality_2857_256/shared/weights_10:0\022\026Identity_53/RefEnter:0\022M\n3transformer/body/decoder/layer_0/ffn/conv2/kernel:0\022\026Identity_75/RefEnter:0\022j\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel:0\022\026Identity_67/RefEnter:0R\031transformer/while/Enter:0R\033transformer/while/Enter_1:0R\033transformer/while/Enter_2:0R\033transformer/while/Enter_3:0R\033transformer/while/Enter_4:0R\033transformer/while/Enter_5:0R\033transformer/while/Enter_6:0R\033transformer/while/Enter_7:0R\033transformer/while/Enter_8:0R\033transformer/while/Enter_9:0R\034transformer/while/Enter_10:0R\034transformer/while/Enter_11:0"
      }
    }
  }
  signature_def {
    key: "serving_default"
    value {
      inputs {
        key: "input"
        value {
          name: "serialized_example:0"
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: -1
            }
          }
        }
      }
      outputs {
        key: "batch_prediction_key"
        value {
          name: "DatasetToSingleElement:0"
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
      outputs {
        key: "outputs"
        value {
          name: "transformer/strided_slice_10:0"
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: -1
            }
          }
        }
      }
      outputs {
        key: "scores"
        value {
          name: "transformer/strided_slice_11:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
}
